<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Memo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iitii.github.io/"/>
  <updated>2019-05-24T16:39:48.859Z</updated>
  <id>https://iitii.github.io/</id>
  
  <author>
    <name>IITII</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TAPD git关联提交</title>
    <link href="https://iitii.github.io/2019/05/23/1/"/>
    <id>https://iitii.github.io/2019/05/23/1/</id>
    <published>2019-05-22T16:15:57.000Z</published>
    <updated>2019-05-24T16:39:48.859Z</updated>
    
    <content type="html"><![CDATA[<hr><p><em>Update at Fri May 24 23:34:46 CST 2019</em></p><ul><li>提交人数的显示 bug，已经修好了。</li></ul><hr><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><div class="note danger">            <p>不, 这里没有内容… </p>          </div>      <h3>然后</h3>    <div class="note success">            <p>我们需要的什么？是从摇篮到坟墓的全套服务 </p>          </div>  <h3 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h3><ul><li>这里有现成的轮子，就不再复述了。<br><a href="https://www.jianshu.com/p/0c0d8d10a1cb" target="_blank" rel="noopener">注册Github详细教程</a></li></ul><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><ul><li>同上<br><a href="https://wiki.jikexueyuan.com/project/github-basics/creat-new-repo.html" target="_blank" rel="noopener">在 GitHub 上创建一个新仓库</a></li></ul><h3 id="将-TAPD-与-Github仓库-关联起来"><a href="#将-TAPD-与-Github仓库-关联起来" class="headerlink" title="将 TAPD 与 Github仓库 关联起来"></a>将 <em>TAPD</em> 与 <em>Github仓库</em> 关联起来</h3><blockquote><p>ps: Secret Token 不是必须项，可以不生成。如果要用的话，就填到 <strong>Payload URL</strong> 下面的 <strong>Secret</strong> 里面去。<br>所谓的网络钩子，只是一个关联，相当于一个快捷方式。它并不会把文件什么的拉取到 <em>TAPD</em> 上，它只会告诉你有提交记录（相当于通知信息）。<br>可以把<em>TAPD</em>看成一个<strong>布告栏</strong>。当你看到有你感兴趣的信息时，你肯定不会向布告栏询问更具体的细节 <strong>而是</strong> 向发布公告的人(<em>Github</em>)询问更具体的细节。  </p></blockquote><ol><li>在GitHub上新建一个项目</li><li>点击仓库的设置</li><li>点击 <strong>Webhooks</strong> </li><li>点击 <strong>Add Webhook</strong></li></ol><p><img src="/images/git/1.png" alt="Loading"></p><ol start="5"><li>进入<strong>TAPD</strong> 项目详情页</li><li>点击设置</li><li>点击应用设置</li><li>点击Github源码（进去后可能会有个弹窗，关掉别管就行了）</li><li>点击复制URL</li><li>打开GitHub添加Webhook的那个页面，把URL复制到 <strong>PayLoad URL</strong> 里面去</li><li>点击下面的 <strong>Send me everything</strong></li><li>点击<strong>Add webhook</strong><br><img src="/images/git/2.png" alt="Loading"><br><img src="/images/git/3.png" alt="Loading"><br><img src="/images/git/4.png" alt="Loading"><br><img src="/images/git/5.png" alt="Loading">  </li></ol><h3 id="开始第一个提交"><a href="#开始第一个提交" class="headerlink" title="开始第一个提交"></a>开始第一个提交</h3><blockquote><p>提供3种提交方式：  </p><ol><li>网页提交  </li><li>使用 <em>Github Desktop</em> 进行提交</li><li>纯命令行操作<br>新手推荐第一种，也就是下面介绍的这种提交方式  </li></ol><ul><li>大体操作可以参考这个：<a href="http://wiki.jikexueyuan.com/project/github-basics/commit-first-change.html" target="_blank" rel="noopener">提交你的第一个更改</a>  </li><li><strong>注意</strong> ：在提交更改的时候，<strong><em>commit信息</em></strong> 必须符合接下来的提交格式，要不然 <strong>TAPD</strong> 没有关联提交记录</li></ul></blockquote><h3 id="提交格式"><a href="#提交格式" class="headerlink" title="提交格式"></a>提交格式</h3><h4 id="标准提交格式"><a href="#标准提交格式" class="headerlink" title="标准提交格式"></a>标准提交格式</h4><ul><li>需求、缺陷、任务对应关键字：</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需求： --story=[story id] --user=[usernick] 描述  </span><br><span class="line">缺陷： --bug=[bug id] --user=[usernick] 描述  </span><br><span class="line">任务： --task=[task id] --user=[usernick] 描述</span><br></pre></td></tr></table></figure></div><h4 id="已尝试的提交格式（除标准）"><a href="#已尝试的提交格式（除标准）" class="headerlink" title="已尝试的提交格式（除标准）"></a>已尝试的提交格式（除标准）</h4><blockquote><ol><li>TAPD 显示关联提交那里显示的提交用户名和 <strong>–user</strong> 指定的用户名没有必然关系.  </li><li>这个显示的用户名只会和本地<em>git</em>设定的用户名一样   </li><li>如果本地<em>git</em>没有指定用户名的话，就会显示为GitHub的用户名   </li><li>没有详情的提交会被 <em>TAPD</em> 视为 <strong>无效提交</strong>，<strong>不会</strong>被同步到<em>git</em>关联提交   </li><li><del>Git关联提交人数显示有问题，除了<strong>0</strong>就是<strong>1</strong>。也许这是一个<strong>bool</strong> 类型的值。（；´д｀）ゞ</del>   </li><li>在关联提交之后，需求的类型不会改变。换句话说，就是不会从 “规划中” 自动变成 “已完成”，这个要自己改。<br>划掉的为未进行测试提交的示例。<br><img src="/images/git/6.png" alt="Loading"><br><img src="/images/git/7.png" alt="Loading">  </li><li><code>--user=userName 提交说明</code> 提交有效，但是不会被关联到 TAPD</li><li><code>--story=1002534 --story=1002532 --user=Gayhub 测试关联提交</code> 提交有效，而且会被<strong>TAPD</strong>视为两次提交,完成了两个需求（GitHub还是将这个视为一次提交）</li><li><del><code>--story=1002534 --story=1002532</code></del></li><li><del><code>--user=Gayhub --story=1002534 --story=1002532  测试关联提交</code></del></li><li>如果还有 <strong>其他可能的方案</strong> 或者 <strong>测试结果</strong> 欢迎留言</li></ol></blockquote><h3 id="添加项目协助者（拉小组成员进项目）"><a href="#添加项目协助者（拉小组成员进项目）" class="headerlink" title="添加项目协助者（拉小组成员进项目）"></a>添加项目协助者（拉小组成员进项目）</h3><ul><li>跟设置 WebHook 差不多，还是项目那边的 <em>setting</em> 进去</li></ul><ol><li>点击 <em>setting</em></li><li>点击 <em>Collaborators</em></li><li>可以通过 <em>Github</em> 的 <strong>用户名</strong> 或者 <strong>全名</strong> 或者 <strong>注册使用的电子邮件地址</strong> 来查找并添加用户</li><li>点击 <em>Add collaborator</em>，完成。<blockquote><p>如果用户设置了隐藏电子邮件地址的话，那就无法通过电子邮件地址来添加协助者。</p></blockquote></li></ol><p><img src="/images/git/8.png" alt="Loading"></p>]]></content>
    
    <summary type="html">
    
      TAPD 关于git关联提交的全套服务 (假 笑
    
    </summary>
    
      <category term="git" scheme="https://iitii.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://iitii.github.io/tags/git/"/>
    
      <category term="TAPD" scheme="https://iitii.github.io/tags/TAPD/"/>
    
  </entry>
  
  <entry>
    <title>you-get+ffmpeg实现从下载到提取音视频</title>
    <link href="https://iitii.github.io/2019/05/01/1/"/>
    <id>https://iitii.github.io/2019/05/01/1/</id>
    <published>2019-04-30T17:30:15.000Z</published>
    <updated>2019-05-12T10:29:13.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装you-get"><a href="#安装you-get" class="headerlink" title="安装you-get"></a>安装you-get</h3><ul><li><code>sudo apt-get install python3-pip &amp;&amp; sudo pip3 install you-get</code></li><li>其他安装方法：<a href="https://github.com/soimort/you-get#option-1-install-via-pip" target="_blank" rel="noopener">https://github.com/soimort/you-get#option-1-install-via-pip</a></li></ul><h3 id="简单使用you-get"><a href="#简单使用you-get" class="headerlink" title="简单使用you-get"></a>简单使用you-get</h3><blockquote><p>更完善的使用方法请看：<a href="https://github.com/soimort/you-get#getting-started" target="_blank" rel="noopener">https://github.com/soimort/you-get#getting-started</a></p></blockquote><h4 id="指定下载的画质或者媒体类型"><a href="#指定下载的画质或者媒体类型" class="headerlink" title="指定下载的画质或者媒体类型"></a>指定下载的画质或者媒体类型</h4><ol><li>使用 <code>-i</code> 选项进行查看可用下载：<code>you-get -i &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></li><li>使用 <code>--itag=</code> 选项指定下载文件：<code>you-get --itag=18 &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></li></ol><h4 id="直接下载-you-get-39-https-www-youtube-com-watch-v-jNQXAC9IVRw-39"><a href="#直接下载-you-get-39-https-www-youtube-com-watch-v-jNQXAC9IVRw-39" class="headerlink" title="直接下载: you-get &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;"></a>直接下载: <code>you-get &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></h4><blockquote><p>直接下载一般会下载 <code>-i</code> 选项的第一个文件，<strong>一般</strong> 是最高的画质。</p></blockquote><h4 id="下载其他文件，不仅仅是媒体文件：you-get-https-stallman-org-rms-jpg"><a href="#下载其他文件，不仅仅是媒体文件：you-get-https-stallman-org-rms-jpg" class="headerlink" title="下载其他文件，不仅仅是媒体文件：you-get https://stallman.org/rms.jpg"></a>下载其他文件，不仅仅是媒体文件：<code>you-get https://stallman.org/rms.jpg</code></h4><h4 id="通过-HTTP-代理下载"><a href="#通过-HTTP-代理下载" class="headerlink" title="通过 HTTP 代理下载"></a>通过 <strong>HTTP</strong> 代理下载</h4><blockquote><p>没有代理？参见：<a href="https://iitii.github.io/2019/03/17/1/">自建简易代理</a></p><ul><li>我们只需要在<strong>第一个选项前面</strong>插入<code>-x ip:port</code>就行，如：<code>you-get -x localhost:1080 -i &#39;https://www.youtube.com/watch?v=jNQXAC9IVRw&#39;</code></li></ul></blockquote><h3 id="安装FFmpeg"><a href="#安装FFmpeg" class="headerlink" title="安装FFmpeg"></a>安装FFmpeg</h3><ul><li>参见我的这篇博文：<a href="https://iitii.github.io/2019/02/01/FFmpeg%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">FFmpeg的简单使用</a></li></ul><h3 id="使用you-get-ffmpeg实现从下载到提取音视频"><a href="#使用you-get-ffmpeg实现从下载到提取音视频" class="headerlink" title="使用you-get+ffmpeg实现从下载到提取音视频"></a>使用you-get+ffmpeg实现从下载到提取音视频</h3><h4 id="you-get下载视频"><a href="#you-get下载视频" class="headerlink" title="you-get下载视频"></a>you-get下载视频</h4><ul><li>参见：<a href="#简单使用you-get">简单使用you-get</a></li></ul><h4 id="ffmpeg提取指定音视频文件"><a href="#ffmpeg提取指定音视频文件" class="headerlink" title="ffmpeg提取指定音视频文件"></a>ffmpeg提取指定音视频文件</h4><h5 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h5><ul><li>参见我的这篇博文：<a href="https://iitii.github.io/2019/02/01/FFmpeg%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/">FFmpeg的简单使用</a><h5 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h5></li><li><p>获取脚本：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/IITII/Useless/master/ffmpeg.sh</span><br></pre></td></tr></table></figure></div></li><li><p>使用脚本：</p><ol><li>直接<code>./ffmpeg.sh</code> 按着脚本一步一步来   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ./ffmpeg.sh</span><br><span class="line">请选择你要选择的操作的序号：</span><br><span class="line"></span><br><span class="line">* 所有文件名请完整输入文件名称，包括后缀名！</span><br><span class="line"></span><br><span class="line">1.获取aac音频文件</span><br><span class="line">2.获取mp3文件</span><br><span class="line">3.获取H.264视频流文件(.mp4文件)</span><br><span class="line">4.整合mp4文件和mp4文件</span><br><span class="line">5.整合mp4和mp3文件</span><br><span class="line">6.整合mp4和aac文件</span><br><span class="line">7.添加srt字幕</span><br><span class="line">8.srt字幕转ass</span><br><span class="line">9.添加ass字幕</span><br></pre></td></tr></table></figure></div></li></ol></li></ul><ol start="2"><li><p>命令行传参</p><ol><li><p>使用 <code>-h</code> 查看帮助</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ./ffmpeg.sh -h</span><br><span class="line">-h: To show this menu</span><br><span class="line">-e: Show Some Useful Templates</span><br><span class="line">-m [1-9]: To switch mode</span><br><span class="line">     -m 1: 获取aac音频文件</span><br><span class="line">     -m 2: 获取mp3文件</span><br><span class="line">     -m 3: 获取H.264视频流文件(.mp4文件)</span><br><span class="line">     -m 4: 整合mp4文件和mp4文件</span><br><span class="line">     -m 5: .整合mp4和mp3文件</span><br><span class="line">     -m 6: 整合mp4和aac文件</span><br><span class="line">     -m 7: 添加srt字幕</span><br><span class="line">     -m 8: srt字幕转ass</span><br><span class="line">     -m 9: 添加ass字幕</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>-e</code> 查看示例</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./ffmpeg.sh -e</span><br><span class="line">./ffmpeg.sh -m 1 input.mp4 output.aac</span><br><span class="line">./ffmpeg.sh -m 2 input.mp4 output.mp3</span><br><span class="line">./ffmpeg.sh -m 3 input.mp4 output.mp4</span><br><span class="line">./ffmpeg.sh -m 4 input_audio.mp4 input_video.mp4 output.mp4</span><br><span class="line">./ffmpeg.sh -m 5 input.mp3 input.mp4 output.mp4</span><br><span class="line">./ffmpeg.sh -m 6 input.aac input.mp4 output.mp4</span><br><span class="line">./ffmpeg.sh -m 7 input.mp4 input.srt output.mp4</span><br><span class="line">./ffmpeg.sh -m 8 input.srt output.ass</span><br><span class="line">./ffmpeg.sh -m 9 input.mp4 input.ass output.mp4</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>-m</code> 指定处理模式</p><blockquote><p>具体使用参见示例：<code>./ffmpeg.sh -e</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-m 1: 获取aac音频文件</span><br><span class="line">-m 2: 获取mp3文件</span><br><span class="line">-m 3: 获取H.264视频流文件(.mp4文件)</span><br><span class="line">-m 4: 整合mp4文件和mp4文件</span><br><span class="line">-m 5: 整合mp4和mp3文件</span><br><span class="line">-m 6: 整合mp4和aac文件</span><br><span class="line">-m 7: 添加srt字幕</span><br><span class="line">-m 8: srt字幕转ass</span><br><span class="line">-m 9: 添加ass字幕</span><br></pre></td></tr></table></figure></div></blockquote></li></ol></li></ol><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><ul><li><a href="https://youtu.be/k45EpgweT9o" target="_blank" rel="noopener">Carole &amp; Tuesday片头曲</a></li></ul><ol><li>下载文件：<code>you-get https://youtu.be/k45EpgweT9o</code></li><li>合并文件：<code>./ffmpeg.sh -m 4 *01*.mp4 *00*.mp4 output.mp4</code></li><li>压入字幕：<code>./ffmpeg.sh -m 7 output.mp4 *.ja.srt output_srt.mp4</code></li></ol><h3 id="So-Enjoy-it"><a href="#So-Enjoy-it" class="headerlink" title="So, Enjoy it!!!"></a>So, Enjoy it!!!</h3><blockquote><p>当然如果有 <em>bug</em> 的话，还请及时反馈（推荐 <em><a href="https://github.com/IITII/Useless" target="_blank" rel="noopener">GitHub</a></em> 直接提 <strong>issues</strong>, 直接在文章底部留言也行）</p></blockquote>]]></content>
    
    <summary type="html">
    
      有的时候我们发现一个很好的视频想下载却苦于没有办法的时候该怎么办呢？下载下来的文件和我们想要的不一样该怎么办呢？这时候我们可以通过you-get和ffmpeg实现
    
    </summary>
    
      <category term="software" scheme="https://iitii.github.io/categories/software/"/>
    
      <category term="useful" scheme="https://iitii.github.io/categories/software/useful/"/>
    
    
      <category term="ffmpeg" scheme="https://iitii.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu使用命令修改屏幕的显示方向</title>
    <link href="https://iitii.github.io/2019/04/22/1/"/>
    <id>https://iitii.github.io/2019/04/22/1/</id>
    <published>2019-04-22T14:56:49.000Z</published>
    <updated>2019-04-22T15:23:18.875Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Ubuntu踩坑记</blockquote><p><del>之前VM的<code>查看-&gt;立即适应客户机</code>还没有变灰的时候倒是可以通过这个调屏幕的方向，不过天有不测风云 :-(</del></p><blockquote><p>PS: 在更改屏幕方向以后如果您想保持这个显示方向的话，还请在 <code>setting-&gt;Display</code> 里面修改显示器方向后保存。<br>如果不，重启之后系统就会恢复原来的显示器方向。</p></blockquote><h3 id="恢复默认方向"><a href="#恢复默认方向" class="headerlink" title="恢复默认方向"></a>恢复默认方向</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrandr -o normal</span><br></pre></td></tr></table></figure></div><h3 id="左旋转"><a href="#左旋转" class="headerlink" title="左旋转"></a>左旋转</h3><blockquote><p>同理右旋转和反转屏幕等操作也类似，更多操作还请参考 <code>xrandr --help</code></p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrandr -o left</span><br></pre></td></tr></table></figure></div><h3 id="查看当前显示器的输出信息"><a href="#查看当前显示器的输出信息" class="headerlink" title="查看当前显示器的输出信息"></a>查看当前显示器的输出信息</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xrandr -o q</span><br></pre></td></tr></table></figure></div><h3 id="旋转某个视频接口的视频输出方向"><a href="#旋转某个视频接口的视频输出方向" class="headerlink" title="旋转某个视频接口的视频输出方向"></a>旋转某个视频接口的视频输出方向</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xrandr --output HDMI1 --rotate left</span><br><span class="line"></span><br><span class="line">xrandr --output HDMI1 --rotate normal</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      这几天折腾Ubuntu虚拟机（OS:Ubuntu18.04）,发现虚拟机的屏幕方向不对而且鼠标也移位了。。。最后使用 xrandr 把屏幕方向调过来了。
    
    </summary>
    
      <category term="config" scheme="https://iitii.github.io/categories/config/"/>
    
    
      <category term="Ubuntu" scheme="https://iitii.github.io/tags/Ubuntu/"/>
    
      <category term="Gnome" scheme="https://iitii.github.io/tags/Gnome/"/>
    
      <category term="xrandr" scheme="https://iitii.github.io/tags/xrandr/"/>
    
  </entry>
  
  <entry>
    <title>禁用Windows 驱动器/文件夹 压缩属性</title>
    <link href="https://iitii.github.io/2019/04/10/1/"/>
    <id>https://iitii.github.io/2019/04/10/1/</id>
    <published>2019-04-10T14:53:50.000Z</published>
    <updated>2019-04-10T15:13:03.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本教程介绍如何在Microsoft Windows中禁用“文件压缩”功能。<br>原文链接：<a href="https://www.technipages.com/disable-windows-file-compression" target="_blank" rel="noopener">https://www.technipages.com/disable-windows-file-compression</a></p></blockquote><h3 id="Windows-10-8-7和Vista命令"><a href="#Windows-10-8-7和Vista命令" class="headerlink" title="Windows 10,8,7和Vista命令"></a>Windows 10,8,7和Vista命令</h3><ul><li>选择 <code>开始</code> 按钮，然后键入 <code>CMD</code>。  </li><li>右键单击 <code>命令提示符</code> ，然后选择 <code>以管理员身份运行</code>。</li><li>如果提示输入密码，请输入具有管理员权限的帐户的凭据。键入以下内容，然后按 <code>Enter</code>:</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsutil behavior set disablecompression <span class="number">1</span></span><br></pre></td></tr></table></figure></div><ul><li><p>您应该收到一条消息 <strong>请注意：对此设置的更改需要重新启动才能生效。重新启动计算机以进行更改。</strong></p></li><li><p>如果要再次启用它，可以使用该命令:</p></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fsutil behavior set disablecompression <span class="number">0</span></span><br></pre></td></tr></table></figure></div><h3 id="Windows组策略"><a href="#Windows组策略" class="headerlink" title="Windows组策略"></a>Windows组策略</h3><ol><li>从组策略编辑器，导航到<code>计算机配置</code>&gt;<code>管理模板</code>&gt;<code>系统</code>&gt;<code>文件系统</code>&gt;<code>NTFS</code>。</li><li>打开<code>不允许在所有NTFS卷上进行压缩</code>。</li><li>选择<code>已启用</code>单选按钮，然后选择<code>确定</code>。</li></ol><h3 id="Windows-2000和XP-NTFS卷"><a href="#Windows-2000和XP-NTFS卷" class="headerlink" title="Windows 2000和XP NTFS卷"></a>Windows 2000和XP NTFS卷</h3><ol><li>按住<code>Windows键</code>，然后按<code>R</code>。</li><li>输入<code>regedit</code>并选择<code>确定</code>。</li><li><p>导航到以下内容：<code>HKEY_LOCAL_MACHINE/SYSTEM/CURRENTCONTROLSET/Control/FileSystem</code></p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE</span><br><span class="line">SYSTEM</span><br><span class="line">CURRENTCONTROLSET</span><br><span class="line">Control</span><br><span class="line">FileSystem</span><br></pre></td></tr></table></figure></div></li><li><p>在<code>NtfsDisableCompression</code> 的右侧查找条目。如果它不存在，您将需要创建它。为此，右键单击<code>FileSystem</code>，然后选择<code>新建</code> &gt;  <code>DWORD值</code>。为该值指定<code>NtfsDisableCompression</code>。完成后按<code>Enter</code>键。</p></li><li>右键单击<code>NtfsDisableCompression</code>条目，然后单击<code>修改</code>。要禁用压缩，请将<code>值数据</code>设置为<code>1</code>。（要再次启用压缩，请将<code>数值数据</code>设置为0或删除NftsDisableCompression）</li><li>重新启动计算机以应用更改。</li><li>现在，当尝试压缩文件夹时，将产生以下错误：<center><br><p>将属性应用于文件时发生错误：<br></p><p>{file path and filename}<br></p><p>拒绝访问。<br><img src="https://www.technipages.com/images/articles/efs-error.gif"><br></p></center></li></ol>]]></content>
    
    <summary type="html">
    
      本教程介绍如何在Microsoft Windows中禁用“文件压缩”功能。
    
    </summary>
    
      <category term="Windows" scheme="https://iitii.github.io/categories/Windows/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="Windows" scheme="https://iitii.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>IDEA Angular &#39;Component&#39;错误</title>
    <link href="https://iitii.github.io/2019/03/25/1/"/>
    <id>https://iitii.github.io/2019/03/25/1/</id>
    <published>2019-03-24T16:11:44.000Z</published>
    <updated>2019-03-24T16:44:54.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://stackoverflow.com/questions/47584359/angular-error-component-x-is-not-included-in-a-module-when-declared-in-a" target="_blank" rel="noopener">https://stackoverflow.com/questions/47584359/angular-error-component-x-is-not-included-in-a-module-when-declared-in-a</a><br>虽然有这个问题，但是不影响网页正常生成  </p></blockquote><p>解决方案：</p><ol><li><p>如图，打开IDEA设置，把 <strong>Recompile on changes</strong> 勾上 :</p><p> <img src="/images/component-IDEA.png" alt="Loading"></p></li><li><p>在一级子目录下找到 <strong>tsconfig.json</strong> 并且修改 <em>compileOnSave</em> 为 true :</p><p> <img src="/images/component-tsconfig.png" alt="Loading"></p></li><li><p>回到会导致 Component 错误的地方，重新输入 “@Component”</p></li><li>Good luck! :-)</li></ol>]]></content>
    
    <summary type="html">
    
      ERROR:Component &quot;X&quot; is not include in a module and Will not be available inside a temple.consider adding it to a ngmoudle declaration.
    
    </summary>
    
      <category term="Config" scheme="https://iitii.github.io/categories/Config/"/>
    
    
      <category term="Config" scheme="https://iitii.github.io/tags/Config/"/>
    
      <category term="IDEA" scheme="https://iitii.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>自建简易代理</title>
    <link href="https://iitii.github.io/2019/03/17/1/"/>
    <id>https://iitii.github.io/2019/03/17/1/</id>
    <published>2019-03-17T12:25:52.000Z</published>
    <updated>2019-05-24T15:11:57.297Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">智者建桥,愚者建墙</blockquote><blockquote><p>实在不会的，可以 e-mail to <a href="mailto:ccmejx@gmail.com" target="_blank" rel="noopener">ccmejx@gmail.com</a>，请求有偿帮助<br><!--这都不会的，估计脑子有点问题--></p></blockquote><div class="note danger">            <p>若链接失效，不考虑补链 </p>          </div>  <h3 id="为什么需要代理？"><a href="#为什么需要代理？" class="headerlink" title="为什么需要代理？"></a>为什么需要代理？</h3><!--沙雕问题，律师函警告--><center><br><img src="/images/shadiao.jpg" width="200px" height="250px"><br><!--<p>破坏计算机信息系统罪</p>--><br></center><h3 id="滥用-代理会发生什么？"><a href="#滥用-代理会发生什么？" class="headerlink" title="滥用 代理会发生什么？"></a><strong>滥用</strong> 代理会发生什么？</h3><ul><li>喝茶</li></ul><h3 id="前提要求"><a href="#前提要求" class="headerlink" title="前提要求"></a>前提要求</h3><ul><li>有一台VPS</li><li>有基本文字阅读能力</li></ul><h3 id="连接VPS"><a href="#连接VPS" class="headerlink" title="连接VPS"></a>连接VPS</h3><ul><li>使用openssh,putty等进行连接</li><li>直接使用商家提供的console进行连接</li><li>特别注意，在输入密码的时候，终端无回显</li><li>实在不会的，可以 e-mail to <a href="mailto:ccmejx@gmail.com" target="_blank" rel="noopener">ccmejx@gmail.com</a>，请求有偿帮助</li></ul><!--这都不会的，估计脑子有点问题--><h3 id="常用代理搭建方式"><a href="#常用代理搭建方式" class="headerlink" title="常用代理搭建方式"></a>常用代理搭建方式</h3><blockquote><p>声明：ssr, ss, mtproxy一键脚本均采用逗比的一键脚本</p></blockquote><h4 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h4><blockquote><p>v2ray内建支持 Mtproxy</p></blockquote><h5 id="官方go脚本"><a href="#官方go脚本" class="headerlink" title="官方go脚本"></a>官方go脚本</h5><blockquote><p>安装：<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure></div></p></blockquote><p>使用官方脚本可以参考以下步骤：</p><blockquote><p>不清楚的请使用一键脚本<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)  </span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/IITII/Useless/master/v2ray-config.json</span><br><span class="line">mv ./v2ray-config.json /etc/v2ray/config.json</span><br><span class="line">systemctl restart v2ray &amp;&amp; systemctl status v2ray</span><br></pre></td></tr></table></figure></div></p></blockquote><h5 id="multi-v2ray一键脚本"><a href="#multi-v2ray一键脚本" class="headerlink" title="multi-v2ray一键脚本"></a><a href="https://github.com/Jrohy/multi-v2ray" target="_blank" rel="noopener">multi-v2ray</a>一键脚本</h5><h6 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h6><ul><li>V2ray &amp;&amp; Iptables 流量分析</li><li>多端口与用户管理</li><li>动态端口</li><li>禁止BT</li><li>Range port</li><li>TcpFastOpen</li><li>Vmess/Socks5/MTproto 链接分享</li><li>支持的协议类型:<ul><li>TCP</li><li>Fake http</li><li>WebSocket</li><li>mkcp</li><li>mKCP + srtp</li><li>mKCP + utp</li><li>mKCP + wechat-video</li><li>mKCP + dtls</li><li>mKCP + wireguard</li><li>HTTP/2</li><li>Socks5</li><li>MTProto</li><li>Shadowsocks</li><li>Quic</li></ul></li></ul><h6 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h6><p>new install<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(curl -sL https://git.io/fNgqx)</span><br></pre></td></tr></table></figure></div></p><p>keep profile to update<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(curl -sL https://git.io/fNgqx) -k</span><br></pre></td></tr></table></figure></div></p><p>uninstall<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &lt;(curl -sL https://git.io/fNgqx) --remove</span><br></pre></td></tr></table></figure></div></p><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><ul><li>支持 限制 用户速度</li><li>支持 限制 端口设备数</li><li>支持 显示 当前连接IP</li><li>支持 显示 SS/SSR连接+二维码</li><li>支持 切换管理 单/多端口</li><li>支持 一键安装 锐速</li><li>支持 一键安装 BBR</li><li>支持 一键封禁 垃圾邮件(SMAP)/BT/PT  </li></ul><p>下载安装：</p><p>单用户：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure></div></p><p>多用户：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure></div></p><h4 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ss-go.sh &amp;&amp; chmod +x ss-go.sh &amp;&amp; bash ss-go.sh</span><br></pre></td></tr></table></figure></div><h4 id="Mtproxy"><a href="#Mtproxy" class="headerlink" title="Mtproxy"></a>Mtproxy</h4><p>一般版本：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/mtproxy.sh &amp;&amp; chmod +x mtproxy.sh &amp;&amp; bash mtproxy.sh</span><br></pre></td></tr></table></figure></div></p><p>Go语言版本：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/mtproxy_go.sh &amp;&amp; chmod +x mtproxy_go.sh &amp;&amp; bash mtproxy_go.sh</span><br></pre></td></tr></table></figure></div></p><h4 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a>BBR</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh</span><br></pre></td></tr></table></figure></div><h3 id="生成属于自己的订阅"><a href="#生成属于自己的订阅" class="headerlink" title="生成属于自己的订阅"></a>生成属于自己的订阅</h3><ul><li>可以参考我这篇博文：<a href="https://iitii.github.io/2019/01/22/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85/">搭建个人订阅</a></li></ul><h3 id="关于代理的使用与常见问题的汇总"><a href="#关于代理的使用与常见问题的汇总" class="headerlink" title="关于代理的使用与常见问题的汇总"></a>关于代理的使用与常见问题的汇总</h3><ul><li>参见：<a href="https://moe.best/tutorial/shadowsocksr.html" target="_blank" rel="noopener">[ShadowsocksR] 大概是萌新也看得懂的SSR功能详细介绍&amp;使用教程</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>goproxy</li><li>frp</li><li><a href="https://github.com/Anankke/ss-panel-v3-mod_Uim" target="_blank" rel="noopener">ss panel v3 mod</a></li></ul><p>可以参考我这篇博文：<a href="https://iitii.github.io/2019/02/13/1/">内网穿透</a></p><blockquote class="blockquote-center">无知亦无得</blockquote>]]></content>
    
    <summary type="html">
    
      24字真言：富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善
    
    </summary>
    
      <category term="proxy" scheme="https://iitii.github.io/categories/proxy/"/>
    
    
      <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>Hexo跳过指定文件的渲染</title>
    <link href="https://iitii.github.io/2019/02/15/1/"/>
    <id>https://iitii.github.io/2019/02/15/1/</id>
    <published>2019-02-15T06:54:29.000Z</published>
    <updated>2019-02-15T07:54:38.987Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于hexo的-config-yml配置，官方文档中："><a href="#关于hexo的-config-yml配置，官方文档中：" class="headerlink" title="关于hexo的_config.yml配置，官方文档中："></a>关于hexo的<code>_config.yml</code>配置，官方文档中：</h3><ul><li><p>skip_render：跳过指定文件的渲染，您可使用 <code>glob</code> 表达式来匹配路径。 </p><ol><li><p>未说明具体该怎么配置  </p></li><li><p>修改的<code>_config.yml</code>配置文件应为站点文件夹下的，而非主题文件夹下的<code>_config.yml</code>配置文件  </p></li><li>可以直接 <em><code>Ctrl + F</code></em> 查找 <code>skip_render</code> 关键字</li></ol></li></ul><h3 id="跳过单文件"><a href="#跳过单文件" class="headerlink" title="跳过单文件"></a>跳过单文件</h3><ul><li><p>如果要跳过source文件夹下的test.html，可以这样配置：</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">test.html</span></span><br></pre></td></tr></table></figure></div><p>  or</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[test.html]</span></span><br></pre></td></tr></table></figure></div></li></ul><blockquote><p>注意，千万不要手贱加上个/写成/test.html，这里只能填相对于source文件夹的相对路径。</p></blockquote><h3 id="跳过多文件"><a href="#跳过多文件" class="headerlink" title="跳过多文件"></a>跳过多文件</h3><ol><li><p>如果要忽略source下的test文件夹下所有文件，可以这样配置：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">test/*</span></span><br></pre></td></tr></table></figure></div><p> or</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[test/*]</span></span><br></pre></td></tr></table></figure></div></li><li><p>如果要忽略source下的test文件夹下.html文件，可以这样配置：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">test/*.html</span></span><br></pre></td></tr></table></figure></div><p> or</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[test/*.html]</span></span><br></pre></td></tr></table></figure></div></li><li><p>如果要忽略source下的test文件夹下所有文件和目录，可以这样配置：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">test/**</span></span><br></pre></td></tr></table></figure></div><p> or</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[test/**]</span></span><br></pre></td></tr></table></figure></div></li><li><p>如果要忽略多个路径的文件或目录，可以这样配置：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test.html</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.html'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test/**</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">test/*</span></span><br></pre></td></tr></table></figure></div><p> or</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">[test.html,</span> <span class="string">'*.html'</span><span class="string">,</span> <span class="string">test/**,</span> <span class="string">test/*]</span></span><br></pre></td></tr></table></figure></div></li></ol><h3 id="参见："><a href="#参见：" class="headerlink" title="参见："></a>参见：</h3><ul><li><a href="https://github.com/hexojs/hexo/issues/1146" target="_blank" rel="noopener">如何不处理source目录下某个子目录的所有文件，仅仅是将其copy到public目录中对应目录？</a></li></ul>]]></content>
    
    <summary type="html">
    
      有的时候想要放点私货。直接放在source文件夹下面吧，会被Hexo渲染掉。直接放在public文件下面，每次执行完hexo clean又什么都没了。这时候我们就需要跳过指定文件的渲染了
    
    </summary>
    
      <category term="Hexo" scheme="https://iitii.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://iitii.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="https://iitii.github.io/2019/02/13/1/"/>
    <id>https://iitii.github.io/2019/02/13/1/</id>
    <published>2019-02-13T15:46:15.000Z</published>
    <updated>2019-05-11T08:50:09.148Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">梦一场</blockquote><hr><ul><li><em>Update at Sat May 11 16:49:47 CST 2019</em><blockquote><p><a href="https://liam.page/2018/04/11/break-firewall-by-the-use-of-SSH-tunnel/" target="_blank" rel="noopener">利用正反 SSH 隧道穿透防火墙访问内网服务器</a></p></blockquote></li></ul><hr><h3 id="Announce"><a href="#Announce" class="headerlink" title="Announce:"></a>Announce:</h3><ol><li><p>工具：实现内网穿透，我目前比较推荐frp和goproxy</p></li><li><p>Github: frp: <a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a> </p></li><li>Github: goproxy: <a href="https://github.com/snail007/goproxy" target="_blank" rel="noopener">https://github.com/snail007/goproxy</a></li><li>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</li><li>goproxy是基于golang实现的高性能http,https,websocket,tcp,udp,socks5,ss代理服务器,支持正向代理、反向代理、透明代理、内网穿透、TCP/UDP端口映射、SSH中转、TLS加密传输、协议转换、防污染DNS代理。</li><li>对于内网穿透来说frp比goproxy更功能更多，goproxy更偏向于网络代理</li><li>goproxy内置了长驻后台的功能，如果想后台运行proxy,命令行可以关闭,只需要在命令最后加上<code>--daemon</code>参数即可。如果想防止应用异常退出，可以使用<code>--forever</code>参数，proxy会fork子进程,然后监控子进程,如果子进程异常退出,5秒后重启子进程，该参数配合后台运行参数<code>--daemon</code>和日志参数<code>--log</code>,可以保障proxy一直在后台执行不会因为意外退出,而且可以通过日志文件看到proxy的输出日志内容</li></ol><h3 id="Goproxy"><a href="#Goproxy" class="headerlink" title="Goproxy"></a>Goproxy</h3><h4 id="下载-amp-安装"><a href="#下载-amp-安装" class="headerlink" title="下载 &amp; 安装"></a>下载 &amp; 安装</h4><h5 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h5><ul><li><p>如果你的VPS是linux64位的系统,那么只需要执行下面一句,就可以完成自动安装和配置  </p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto.sh | bash</span><br></pre></td></tr></table></figure></div><blockquote><p>安装完成,配置目录是/etc/proxy,更详细的使用方法请参考手册目录,进一步了解你想要使用的功能.<br>如果安装失败或者你的vps不是linux64位系统,请按照下面的半自动步骤安装:  </p></blockquote></li></ul><h5 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h5><ol><li><p>下载proxy<br>下载地址: <a href="https://github.com/snail007/goproxy/releases/latest" target="_blank" rel="noopener">https://github.com/snail007/goproxy/releases/latest</a><br>下面以v6.2为例,如果有最新版,请使用最新版链接.   </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/proxy/  </span><br><span class="line">wget https://github.com/snail007/goproxy/releases/download/v6.2/proxy-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div></li><li><p>下载自动安装脚本</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /root/proxy/  </span><br><span class="line">wget https://raw.githubusercontent.com/snail007/goproxy/master/install.sh </span><br><span class="line">chmod +x install.sh  </span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></div></li></ol><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><ul><li><p><a href="https://hub.docker.com/r/snail007/goproxy" target="_blank" rel="noopener">docker</a>  </p></li><li><p>项目根目录的Dockerfile文件用来构建,使用golang 1.10.3,构建基于goproxy的master分支最新版本,  </p></li><li><p>全部大小17.3MB,默认情况下使用master分支,不过可以通过修改配置文件Dockerfile<br>或者使用参数GOPROXY_VERSION指定构建的goproxy版本. </p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG GOPROXY_VERSION=v5.3</span><br></pre></td></tr></table></figure></div></li></ul><p>步骤:  </p><ol><li><p>克隆仓库,然后cd进入仓库文件夹,执行:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build .</span><br></pre></td></tr></table></figure></div></li><li><p>镜像打标签:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker tag &lt;上一步的结果ID&gt; snail007/goproxy:latest</span><br></pre></td></tr></table></figure></div></li><li><p>运行<br>参数OPTS的值就是传递给proxy的所有参数<br>比如下面的例子启动了一个http服务:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --restart=always --name goproxy -e OPTS=&quot;http -p :33080&quot; -p 33080:33080 snail007/goproxy:latest</span><br></pre></td></tr></table></figure></div></li><li><p>查看日志:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs -f goproxy</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>Windows 直接下载 <code>*.exe</code> 版就行了</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>http,tcp,udp代理过程会和上级通讯,为了安全我们采用加密通讯,当然可以选择不加密通信通讯,本教程所有和上级通讯都采用加密,需要证书文件.<br>通过下面的命令生成自签名的证书和key文件。<code>proxy keygen -C proxy</code>  </p></blockquote><h5 id="TCP普通用法"><a href="#TCP普通用法" class="headerlink" title="TCP普通用法"></a>TCP普通用法</h5><ul><li>需求：可以通过服务器的28080端口访问到位于本地服务器上的web服务</li><li>条件：<ul><li>本地机器A提供了web服务80端口  </li></ul><ul><li>有VPS一个,公网IP:22.22.22.22</li></ul></li></ul><ul><li><p>步骤：  </p><ol><li><p>在vps上执行  </p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy bridge -p <span class="string">":33080"</span> -C proxy.crt -K proxy.key</span><br><span class="line">proxy server -r <span class="string">":28080@:80"</span> -P <span class="string">"127.0.0.1:33080"</span> -C proxy.crt -K proxy.key</span><br></pre></td></tr></table></figure></div></li><li><p>在本地机器A上面执行  </p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy client -P <span class="string">"22.22.22.22:33080"</span> -C proxy.crt -K proxy.key`</span><br></pre></td></tr></table></figure></div></li><li><p>完成  </p></li></ol></li></ul><h5 id="UDP普通用法"><a href="#UDP普通用法" class="headerlink" title="UDP普通用法"></a>UDP普通用法</h5><ul><li><p>背景:  </p><ul><li>公司机器A提供了DNS解析服务,UDP:53端口  </li><li>有VPS一个,公网IP:22.22.22.22  </li></ul></li><li><p>需求:<br>  在家里能够通过设置本地dns为22.22.22.22,使用公司机器A进行域名解析服务.  </p></li><li><p>步骤:  </p><ol><li><p>在vps上执行 </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy bridge -p <span class="string">":33080"</span> -C proxy.crt -K proxy.key</span><br><span class="line">proxy server --udp -r <span class="string">":53@:53"</span> -P <span class="string">"127.0.0.1:33080"</span> -C proxy.crt -K proxy.key</span><br></pre></td></tr></table></figure></div></li><li><p>在公司机器A上面执行 </p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy client -P <span class="string">"22.22.22.22:33080"</span> -C proxy.crt -K proxy.key</span><br></pre></td></tr></table></figure></div></li><li><p>完成    </p></li></ol></li></ul><h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><h4 id="下载-amp-安装-1"><a href="#下载-amp-安装-1" class="headerlink" title="下载 &amp; 安装"></a>下载 &amp; 安装</h4><ul><li><p>根据对应的操作系统及架构，从 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">Release</a> 页面下载最新版本的程序。</p></li><li><p>将 <strong>frps</strong> 及 <strong>frps.ini</strong> 放到具有公网 IP 的机器上。</p></li><li><p>将 <strong>frpc</strong> 及 <strong>frpc.ini</strong> 放到处于内网环境的机器上。</p></li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><hr><p><strong>Contents</strong></p><ul><li><a href="#通过自定义域名访问部署于内网的web服务">通过自定义域名访问部署于内网的web服务</a></li><li><a href="#通过ssh访问内网机器">通过ssh访问内网机器</a></li><li><a href="#转发DNS查询请求">转发DNS查询请求</a></li><li><a href="#对外提供简单的文件访问服务">对外提供简单的文件访问服务</a></li><li><a href="#安全地暴露内网服务">安全地暴露内网服务</a></li><li><a href="#点对点内网穿透">点对点内网穿透</a></li><li><a href="#总结">总结</a></li></ul><hr><h5 id="通过自定义域名访问部署于内网的web服务"><a href="#通过自定义域名访问部署于内网的web服务" class="headerlink" title="通过自定义域名访问部署于内网的web服务"></a>通过自定义域名访问部署于内网的web服务</h5><p>有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过 frp 就可以实现这一功能，以下示例为 http 服务，https 服务配置方法相同， vhost_http_port 替换为 vhost_https_port， type 设置为 https 即可。</p><ol><li><p>修改 frps.ini 文件，设置 http 访问端口为 8080：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动 frps；</p><p> <code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在的服务器的 IP 为 x.x.x.x，local_port 为本地机器上 web 服务对应的端口, 绑定自定义域名 <code>www.yourdomain.com</code>:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = www.yourdomain.com</span><br></pre></td></tr></table></figure></div></li><li><p>启动 frpc：</p><p> <code>./frpc -c ./frpc.ini</code></p></li><li><p>将 <code>www.yourdomain.com</code> 的域名 A 记录解析到 IP <code>x.x.x.x</code>，如果服务器已经有对应的域名，也可以将 CNAME 记录解析到服务器原先的域名。</p></li><li><p>通过浏览器访问 <code>http://www.yourdomain.com:8080</code> 即可访问到处于内网机器上的 web 服务。</p></li></ol><h5 id="通过ssh访问内网机器"><a href="#通过ssh访问内网机器" class="headerlink" title="通过ssh访问内网机器"></a>通过ssh访问内网机器</h5><ol><li><p>修改 frps.ini 文件，这里使用了最简化的配置：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动 frps：</p><p> <code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 x.x.x.x；</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动 frpc：</p><p> <code>./frpc -c ./frpc.ini</code></p></li><li><p>通过 ssh 访问内网机器，假设用户名为 test：</p><p> <code>ssh -oPort=6000 test@x.x.x.x</code></p></li></ol><h5 id="转发DNS查询请求"><a href="#转发DNS查询请求" class="headerlink" title="转发DNS查询请求"></a>转发DNS查询请求</h5><p>DNS 查询请求通常使用 UDP 协议，frp 支持对内网 UDP 服务的穿透，配置方式和 TCP 基本一致。</p><ol><li><p><a href="#通过ssh访问内网机器">frps 的部署步骤同上。</a></p></li><li><p>启动 frps：</p><p> <code>./frps -c ./frps.ini</code></p></li><li><p>修改 frpc.ini 文件，设置 frps 所在服务器的 IP 为 x.x.x.x，转发到 Google 的 DNS 查询服务器 <code>8.8.8.8</code> 的 udp 53 端口：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dns]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">53</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动 frpc：</p><p> <code>./frpc -c ./frpc.ini</code></p></li><li><p>通过 dig 测试 UDP 包转发是否成功，预期会返回 <code>www.google.com</code> 域名的解析结果：</p><p> <code>dig @x.x.x.x -p 6000 www.google.com</code></p></li></ol><h5 id="对外提供简单的文件访问服务"><a href="#对外提供简单的文件访问服务" class="headerlink" title="对外提供简单的文件访问服务"></a>对外提供简单的文件访问服务</h5><ul><li><p>通过 <code>static_file</code> 插件可以对外提供一个简单的基于 HTTP 的文件访问服务。</p></li><li><p><a href="#通过ssh访问内网机器">frps 的部署步骤同上。</a></p><ol><li><p>启动 frpc，启用 <code>static_file</code> 插件，配置如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[test_static_file]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">plugin</span> = static_file</span><br><span class="line"><span class="comment"># 要对外暴露的文件目录</span></span><br><span class="line"><span class="attr">plugin_local_path</span> = /tmp/file</span><br><span class="line"><span class="comment"># 访问 url 中会被去除的前缀，保留的内容即为要访问的文件路径</span></span><br><span class="line"><span class="attr">plugin_strip_prefix</span> = static</span><br><span class="line"><span class="attr">plugin_http_user</span> = abc</span><br><span class="line"><span class="attr">plugin_http_passwd</span> = abc</span><br></pre></td></tr></table></figure></div></li></ol></li></ul><ol start="2"><li>通过浏览器访问 <code>http://x.x.x.x:6000/static/</code> 来查看位于 <code>/tmp/file</code> 目录下的文件，会要求输入已设置好的用户名和密码。</li></ol><h5 id="安全地暴露内网服务"><a href="#安全地暴露内网服务" class="headerlink" title="安全地暴露内网服务"></a>安全地暴露内网服务</h5><ul><li><p>对于某些服务来说如果直接暴露于公网上将会存在安全隐患。</p></li><li><p>使用 <strong>stcp(secret tcp)</strong> 类型的代理可以避免让任何人都能访问到要穿透的服务，但是访问者也需要运行另外一个 frpc。</p></li><li><p>以下示例将会创建一个只有自己能访问到的 ssh 服务代理。</p><ul><li><p><a href="#通过ssh访问内网机器">frps 的部署步骤同上。</a></p><ol><li><p>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[secret_ssh]</span></span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure></div></li><li><p>在要访问这个服务的机器上启动另外一个 frpc，配置如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[secret_ssh_visitor]</span></span><br><span class="line"><span class="attr">type</span> = stcp</span><br><span class="line"><span class="comment"># stcp 的访问者</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="comment"># 要访问的 stcp 代理的名字</span></span><br><span class="line"><span class="attr">server_name</span> = secret_ssh</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="comment"># 绑定本地端口用于访问 ssh 服务</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure></div></li><li><p>通过 ssh 访问内网机器，假设用户名为 test：</p><p><code>ssh -oPort=6000 test@127.0.0.1</code></p></li></ol></li></ul></li></ul><h5 id="点对点内网穿透"><a href="#点对点内网穿透" class="headerlink" title="点对点内网穿透"></a>点对点内网穿透</h5><ul><li><p>frp 提供了一种新的代理类型 <strong>xtcp</strong> 用于应对在希望传输大量数据且流量不经过服务器的场景。</p></li><li><p>使用方式同 <strong>stcp</strong> 类似，需要在两边都部署上 frpc 用于建立直接的连接。</p></li><li><p>目前处于开发的初级阶段，并不能穿透所有类型的 NAT 设备，所以穿透成功率较低。穿透失败时可以尝试 <strong>stcp</strong> 的方式。</p><ol><li><p>frps 除正常配置外需要额外配置一个 udp 端口用于支持该类型的客户端:</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span></span><br></pre></td></tr></table></figure></div></li><li><p>启动 frpc，转发内网的 ssh 服务，配置如下，不需要指定远程端口:</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># 只有 sk 一致的用户才能访问到此服务</span></span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure></div></li><li><p>在要访问这个服务的机器上启动另外一个 frpc，配置如下:</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh_visitor]</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="comment"># xtcp 的访问者</span></span><br><span class="line"><span class="attr">role</span> = visitor</span><br><span class="line"><span class="comment"># 要访问的 xtcp 代理的名字</span></span><br><span class="line"><span class="attr">server_name</span> = p2p_ssh</span><br><span class="line"><span class="attr">sk</span> = abcdefg</span><br><span class="line"><span class="comment"># 绑定本地端口用于访问 ssh 服务</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure></div></li><li><p>通过 ssh 访问内网机器，假设用户名为 test:</p><p>   <code>ssh -oPort=6000 test@127.0.0.1</code></p></li></ol></li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ol><li><p>如果我们想要frp承载TCP类型的流量，可以参考 <a href="#通过ssh访问内网机器">通过ssh访问内网机器</a>，只需要将<code>frpc</code>配置文件里面的端口修改为需要进行代理的端口就行了。再将第6行修改一下就行了，中括号里面内容虽然可以随意填，但是为了鲜明，最好<strong>认真命名</strong>。</p></li><li><p>UDP可以参考 <a href="#转发DNS查询请求">转发DNS查询请求</a></p></li></ol><hr><blockquote><p>frp 配置文件支持使用系统环境变量进行模版渲染，模版格式采用 Go 的标准格式。<br>由于 frp 目前支持的功能和配置项较多，未在文档中列出的功能可以从完整的示例配置文件中发现。  </p></blockquote><ul><li><a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini" target="_blank" rel="noopener">frps 完整配置文件</a></li><li><a href="https://github.com/fatedier/frp/blob/master/conf/frpc_full.ini" target="_blank" rel="noopener">frpc 完整配置文件</a>  </li></ul><hr><h3 id="参见："><a href="#参见：" class="headerlink" title="参见："></a>参见：</h3><ol><li>frp README: <a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/README.md</a></li><li>goproxy README: <a href="https://github.com/snail007/goproxy/blob/master/README.md" target="_blank" rel="noopener">https://github.com/snail007/goproxy/blob/master/README.md</a></li></ol><blockquote class="blockquote-center"><img alt="2019年情人节" height="33" src="/images/valentines-day-2019-4848332248711168-s.png" title="2019年情人节" width="92" border="0" onload="window.lol&amp;&amp;lol()" data-atf="3"></blockquote>]]></content>
    
    <summary type="html">
    
      有的时候我们需要在外网访问区域网资源、或者想要和朋友进行区域网联机而又不想用花生壳一类的商业软件时，内网穿透显得尤为重要、有效。而且进行内网穿透时所有的数据都会流经服务器，而对于未经验证的第三方数据安全也是一个问题, 这时候内网穿透就显得尤为重要
    
    </summary>
    
      <category term="proxy" scheme="https://iitii.github.io/categories/proxy/"/>
    
      <category term="network" scheme="https://iitii.github.io/categories/proxy/network/"/>
    
    
      <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
      <category term="goproxy" scheme="https://iitii.github.io/tags/goproxy/"/>
    
      <category term="frp" scheme="https://iitii.github.io/tags/frp/"/>
    
      <category term="network" scheme="https://iitii.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>NULL</title>
    <link href="https://iitii.github.io/2019/02/05/1/"/>
    <id>https://iitii.github.io/2019/02/05/1/</id>
    <published>2019-02-04T17:18:04.000Z</published>
    <updated>2019-05-24T15:09:35.287Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/lunar-new-year-2019.gif" alt="happy_new_year"></p><center><small>本图片来自Google，侵删</small></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/lunar-new-year-2019.gif&quot; alt=&quot;happy_new_year&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;本图片来自Google，侵删&lt;/small&gt;&lt;/center&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于本博客的搭建</title>
    <link href="https://iitii.github.io/2019/02/04/1/"/>
    <id>https://iitii.github.io/2019/02/04/1/</id>
    <published>2019-02-04T03:24:21.000Z</published>
    <updated>2019-05-12T10:58:40.512Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>劝退三连，不推荐新手尝试，新手请用<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>，<a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a>等动态博客建站，不想折腾的可以使用国内现成平台，如： <del>CSDN（广告比名气多，个人看法）</del>，<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a> </p></blockquote><hr><h3 id="1-现成的轮子"><a href="#1-现成的轮子" class="headerlink" title="1. 现成的轮子"></a>1. 现成的轮子</h3><h4 id="1-Hexo官方文档"><a href="#1-Hexo官方文档" class="headerlink" title="1. Hexo官方文档"></a>1. <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></h4><h4 id="2-NexT主题文档"><a href="#2-NexT主题文档" class="headerlink" title="2. NexT主题文档"></a>2. <a href="https://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT主题文档</a></h4><h4 id="3-Hexo搭建博客教程-lt-–-Hexo博客搭建教程里面这个可以说是非常详细了"><a href="#3-Hexo搭建博客教程-lt-–-Hexo博客搭建教程里面这个可以说是非常详细了" class="headerlink" title="3. Hexo搭建博客教程 &lt;– Hexo博客搭建教程里面这个可以说是非常详细了"></a>3. <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Hexo搭建博客教程</a> &lt;– Hexo博客搭建教程里面这个可以说是非常详细了</h4><h4 id="4-Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）"><a href="#4-Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）" class="headerlink" title="4. Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）"></a>4. <a href="https://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）</a></h4><h4 id="4-图标下载-easyicon"><a href="#4-图标下载-easyicon" class="headerlink" title="4. 图标下载 easyicon"></a>4. <a href="https://www.easyicon.net/" target="_blank" rel="noopener">图标下载 easyicon</a></h4><h4 id="6-Leancloud访客统计插件重大安全漏洞修复指南"><a href="#6-Leancloud访客统计插件重大安全漏洞修复指南" class="headerlink" title="6. Leancloud访客统计插件重大安全漏洞修复指南"></a>6. <a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></h4><blockquote><p>其实如果只是想保证<strong>访客数量不被随意篡改</strong>的话，设置一下安全域名就OK了。这篇博文可以不看 –&gt; <a href="https://leaferx.online/2018/02/11/lc-security/#5acc7b329f54542bb2384a7e" target="_blank" rel="noopener">Leancloud访客统计插件重大安全漏洞修复指南</a></p></blockquote><hr><h3 id="2-关于搭建中的一些问题"><a href="#2-关于搭建中的一些问题" class="headerlink" title="2. 关于搭建中的一些问题"></a>2. 关于搭建中的一些问题</h3><h4 id="1-Leancloud官网"><a href="#1-Leancloud官网" class="headerlink" title="1. Leancloud官网"></a>1. <a href="https://leancloud.cn" target="_blank" rel="noopener">Leancloud官网</a></h4><h4 id="2-GitHub仓库名称"><a href="#2-GitHub仓库名称" class="headerlink" title="2. GitHub仓库名称"></a>2. GitHub仓库名称</h4><ul><li>如果想使用自己的域名而不是GitHub提供的 <strong>GitHub_username.github.io</strong> 域名的话，博客仓库的名称可以不为<strong>GitHub_username.github.io</strong><h4 id="3-操作环境及push分支"><a href="#3-操作环境及push分支" class="headerlink" title="3. 操作环境及push分支"></a>3. 操作环境及push分支</h4></li><li><p>推荐所有操作皆在<strong>git bash</strong>下进行，可以免去很多坑</p></li><li><p>push分支，填<strong>master</strong>就行，其他的如：gh-pages <del>本人未测试,自行斟酌</del></p></li><li><p><strong>git clone</strong>下来的<em>next</em>主题可能会影响博客的生成，<strong>推荐删除</strong> next主题下面的<code>.git</code>,<code>.gitignore</code>和<code>ReadME</code>文件，或者你也可以将next作为一个子模块添加到仓库中</p></li></ul><h4 id="4-关于SEO优化"><a href="#4-关于SEO优化" class="headerlink" title="4. 关于SEO优化"></a>4. 关于SEO优化</h4><ul><li>网站链接提交，传送门：<ul><li><a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google网站站长</a></li><li><a href="https://accounts.google.com/signin/v2/identifier?service=sitemaps&amp;passive=1209600&amp;osid=1&amp;continue=https%3A%2F%2Fsearch.google.com%2Fsearch-console%2Fsitemaps%3Fresource_id%3Dhttps%3A%2F%2Fiitii.github.io%2F&amp;followup=https%3A%2F%2Fsearch.google.com%2Fsearch-console%2Fsitemaps%3Fresource_id%3Dhttps%3A%2F%2Fiitii.github.io%2F&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin" target="_blank" rel="noopener">Google Search Console</a></li><li><a href="https://ziyuan.baidu.com/?castk=LTE%3D" target="_blank" rel="noopener">百度搜索资源平台</a></li></ul></li><li>Google大法好</li><li>网站所有者验证<ul><li>在<a href="https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google网站站长</a>登陆或注册你的Google账号，添加要验证的网站域名</li><li>验证方式（这里只说明网页添加<code>&lt;meta&gt;</code>标签的方法） 添加<code>&lt;meta&gt;</code>标签进行验证网站所有者身份，可以将Google生成的<code>&lt;meta&gt;</code>标签插入到<strong>themes\next\layout_partials\head\head.swig</strong>前面的那一堆<code>&lt;meta&gt;</code>标签后面，然后<code>hexo clean; hexo d -g</code></li><li>验证所有者身份以后，打开<a href="https://accounts.google.com/signin/v2/identifier?service=sitemaps&amp;passive=1209600&amp;osid=1&amp;continue=https%3A%2F%2Fsearch.google.com%2Fsearch-console%2Fsitemaps%3Fresource_id%3Dhttps%3A%2F%2Fiitii.github.io%2F&amp;followup=https%3A%2F%2Fsearch.google.com%2Fsearch-console%2Fsitemaps%3Fresource_id%3Dhttps%3A%2F%2Fiitii.github.io%2F&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin" target="_blank" rel="noopener">Google Search Console</a>，添加资源，点击添加的域名，在左边找到站点地图，进行站点地图的手动提交</li></ul></li><li>百度，请自行尝试<br><img src="/images/lajibaidu.jpg" alt="百度"></li></ul><h4 id="5-关于permalink"><a href="#5-关于permalink" class="headerlink" title="5. 关于permalink:"></a>5. 关于<code>permalink</code>:</h4><ul><li><p>为了SEO在一定程度上的优化可以将<code>permalink</code>修改为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#permalink:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br></pre></td></tr></table></figure></div></li><li><p>但是这样有个问题就是所有的博客文件<code>title.html</code>都会产生在，站点根目录下，感觉起来没有条理性，博文越多越无条理性</p></li><li><p>自定义404页面，可以将404页面的<strong>permalink</strong>修改为/404</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-02</span><span class="bullet">-02</span> <span class="number">21</span><span class="string">:43:19</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></li></ul><h4 id="6-关闭某个页面的评论，可以在title下面加上：comments-false"><a href="#6-关闭某个页面的评论，可以在title下面加上：comments-false" class="headerlink" title="6. 关闭某个页面的评论，可以在title下面加上：comments: false"></a>6. 关闭某个页面的评论，可以在<strong>title</strong>下面加上：<code>comments: false</code></h4><h4 id="7-Deploy问题"><a href="#7-Deploy问题" class="headerlink" title="7. Deploy问题"></a>7. Deploy问题</h4><ul><li><p>如果显示fail，那应该就是你仓库名称填错了；如果显示fatal，那应该是权限问题。请检查自己是否有访问仓库的权限。检查一遍无问题以后，那应该是你电脑上存在旧的登陆状态（具体就是以前在电脑上登陆过其他账号）。</p><h5 id="清除方法："><a href="#清除方法：" class="headerlink" title="清除方法："></a>清除方法：</h5><ul><li><p>把关于GitHub关键字的凭据全部删除再重新登陆</p><p><img src="/images/hexobuild1.jpg" alt="Loading"></p><p><img src="/images/hexobuild2.png" alt="Loading"></p><center><br><svg viewbox="0 0 74 37" width="74" height="37" preserveaspectratio="xMinYMin" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><g id="qaEJec"><path fill="#ea4335" d="M67.954 16.303c-1.33 0-2.278-.608-2.886-1.804l7.967-3.3-.27-.68c-.495-1.33-2.008-3.79-5.102-3.79-3.068 0-5.622 2.41-5.622 5.96 0 3.34 2.53 5.96 5.92 5.96 2.73 0 4.31-1.67 4.97-2.64l-2.03-1.35c-.673.98-1.6 1.64-2.93 1.64zm-.203-7.27c1.04 0 1.92.52 2.21 1.264l-5.32 2.21c-.06-2.3 1.79-3.474 3.12-3.474z"/></g><g id="YGlOvc"><path fill="#34a853" d="M58.193.67h2.564v17.44h-2.564z"/></g><g id="BWfIk"><path fill="#4285f4" d="M54.152 8.066h-.088c-.588-.697-1.716-1.33-3.136-1.33-2.98 0-5.71 2.614-5.71 5.98 0 3.338 2.73 5.933 5.71 5.933 1.42 0 2.548-.64 3.136-1.36h.088v.86c0 2.28-1.217 3.5-3.183 3.5-1.61 0-2.6-1.15-3-2.12l-2.28.94c.65 1.58 2.39 3.52 5.28 3.52 3.06 0 5.66-1.807 5.66-6.206V7.21h-2.48v.858zm-3.006 8.237c-1.804 0-3.318-1.513-3.318-3.588 0-2.1 1.514-3.635 3.318-3.635 1.784 0 3.183 1.534 3.183 3.635 0 2.075-1.4 3.588-3.19 3.588z"/></g><g id="e6m3fd"><path fill="#fbbc05" d="M38.17 6.735c-3.28 0-5.953 2.506-5.953 5.96 0 3.432 2.673 5.96 5.954 5.96 3.29 0 5.96-2.528 5.96-5.96 0-3.46-2.67-5.96-5.95-5.96zm0 9.568c-1.798 0-3.348-1.487-3.348-3.61 0-2.14 1.55-3.608 3.35-3.608s3.348 1.467 3.348 3.61c0 2.116-1.55 3.608-3.35 3.608z"/></g><g id="vbkDmc"><path fill="#ea4335" d="M25.17 6.71c-3.28 0-5.954 2.505-5.954 5.958 0 3.433 2.673 5.96 5.954 5.96 3.282 0 5.955-2.527 5.955-5.96 0-3.453-2.673-5.96-5.955-5.96zm0 9.567c-1.8 0-3.35-1.487-3.35-3.61 0-2.14 1.55-3.608 3.35-3.608s3.35 1.46 3.35 3.6c0 2.12-1.55 3.61-3.35 3.61z"/></g><g id="idEJde"><path fill="#4285f4" d="M14.11 14.182c.722-.723 1.205-1.78 1.387-3.334H9.423V8.373h8.518c.09.452.16 1.07.16 1.664 0 1.903-.52 4.26-2.19 5.934-1.63 1.7-3.71 2.61-6.48 2.61-5.12 0-9.42-4.17-9.42-9.29C0 4.17 4.31 0 9.43 0c2.83 0 4.843 1.108 6.362 2.56L14 4.347c-1.087-1.02-2.56-1.81-4.577-1.81-3.74 0-6.662 3.01-6.662 6.75s2.93 6.75 6.67 6.75c2.43 0 3.81-.972 4.69-1.856z"/></g><br/></svg><br></center><br><center>大法保平安</center></li></ul></li></ul><!--  npm install -g hexo  npm install hexo-wordcount --save  npm install hexo-deployer-git -–save  npm install hexo-generator-searchdb --save  npm install hexo-generator-feed  npm install hexo-generator-feed --save  npm install hexo-generator-sitemap --save  npm install hexo-generator-baidu-sitemap --save  npm install hexo-symbols-count-time --save-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;劝退三连，不推荐新手尝试，新手请用&lt;a href=&quot;https://cn.wordpress.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WordPress&lt;/a&gt;，&lt;a href=&quot;http://typecho.or
      
    
    </summary>
    
      <category term="Hexo" scheme="https://iitii.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://iitii.github.io/tags/Hexo/"/>
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg的简单使用</title>
    <link href="https://iitii.github.io/2019/02/01/FFmpeg%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://iitii.github.io/2019/02/01/FFmpeg简单使用/</id>
    <published>2019-02-01T04:53:14.000Z</published>
    <updated>2019-04-30T11:41:42.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><ul><li>在FFmpeg的下载页面下载需要的版本，目前有Linux、Windows、MacOS版本 &amp; Source code</li><li>下载传送门：<ul><li>官网：<a href="https://ffmpeg.org/download.html" target="_blank" rel="noopener">https://ffmpeg.org/download.html</a> </li><li>Github: <a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">https://github.com/FFmpeg/FFmpeg</a></li></ul></li></ul><hr><ul><li>从源代码进行构建：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install yasm</span><br><span class="line"><span class="comment">#***下载最新版release，假设下载后的release名称为：n4.0.1***</span></span><br><span class="line">name=n4.0.1</span><br><span class="line">tar -xvf <span class="variable">$name</span></span><br><span class="line"><span class="built_in">cd</span> ffmpeg</span><br><span class="line">./configure --<span class="built_in">enable</span>-x264</span><br><span class="line"><span class="comment">#如果有问题，直接 ./configure</span></span><br><span class="line">core=`cat /proc/cpuinfo| grep <span class="string">"processor"</span>| wc -l`</span><br><span class="line">sudo make -j <span class="variable">$core</span> &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></div></li></ul><!--获取最新版 Github release 的一项可选的方法--><!--wget --no-check-certificate -qO- https://api.github.com/repos/FFmpeg/FFmpeg/releases | grep -o '"tag_name": ".*"' |head -n 1| sed 's/"//g;s/v//g' | sed 's/tag_name: //g'--><!--格式为：wget --no-check-certificate -qO- https://api.github.com/repos/$USER-NAME/$REPO-NAME/releases | grep -o '"tag_name": ".*"' |head -n 1| sed 's/"//g;s/v//g' | sed 's/tag_name: //g'--><hr><h3 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h3><blockquote><p>从源代码编译后，会安装 <em>ffmpeg</em>、<em>ffprobe</em>、<em>ffplay</em></p><ul><li><em>ffmpeg</em> 主要用于转码</li><li><em>ffprobe</em> 主要用于查看媒体文件信息</li></ul></blockquote><ul><li><em>ffplay</em> 不仅仅是播放器，同时也是测试 <em>ffmpeg</em> 的 <em>codec</em> 引擎、<em>format</em> 引擎、<em>filter</em> 引擎的工具，并且还可以进行可视化的媒体参数分析</li></ul><hr><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><h4 id="1-初级部分"><a href="#1-初级部分" class="headerlink" title="1. 初级部分"></a>1. 初级部分</h4><h5 id="1-音视频文件转-MP4-ffmpeg-i-input-flv-c-copy-f-mp4-output-mp4"><a href="#1-音视频文件转-MP4-ffmpeg-i-input-flv-c-copy-f-mp4-output-mp4" class="headerlink" title="1. 音视频文件转 MP4: ffmpeg -i input.flv -c copy -f mp4 output.mp4"></a>1. 音视频文件转 MP4: <code>ffmpeg -i input.flv -c copy -f mp4 output.mp4</code></h5><h5 id="2-音视频文件转-FLV-ffmpeg-i-input-mp4-c-copy-f-flv-output-flv"><a href="#2-音视频文件转-FLV-ffmpeg-i-input-mp4-c-copy-f-flv-output-flv" class="headerlink" title="2. 音视频文件转 FLV: ffmpeg -i input.mp4 -c copy -f flv output.flv"></a>2. 音视频文件转 FLV: <code>ffmpeg -i input.mp4 -c copy -f flv output.flv</code></h5><blockquote><p>若音频有问题或者封装出错，尝试：<code>ffmpeg -i input.mp4 -vcodec copy -acodec aac -f flv output.flv</code></p></blockquote><h5 id="3-提取音视频文件里面的AAC音频流-ffmpeg-i-input-mp4-vn-acodec-copy-output-aac"><a href="#3-提取音视频文件里面的AAC音频流-ffmpeg-i-input-mp4-vn-acodec-copy-output-aac" class="headerlink" title="3. 提取音视频文件里面的AAC音频流: ffmpeg  -i input.mp4 -vn -acodec copy output.aac"></a>3. 提取音视频文件里面的<strong>AAC</strong>音频流: <code>ffmpeg  -i input.mp4 -vn -acodec copy output.aac</code></h5><h5 id="4-FFmpeg-输出MP3-ffmpeg-i-INPUT-acodec-libmp3lame-b-a-320k-output-mp3"><a href="#4-FFmpeg-输出MP3-ffmpeg-i-INPUT-acodec-libmp3lame-b-a-320k-output-mp3" class="headerlink" title="4. FFmpeg 输出MP3: ffmpeg -i INPUT -acodec libmp3lame -b:a 320k output.mp3"></a>4. FFmpeg 输出<strong>MP3</strong>: <code>ffmpeg -i INPUT -acodec libmp3lame -b:a 320k output.mp3</code></h5><h5 id="5-提取音视频文件里面的H-264视频流-ffmpeg-i-output-mp4-an-vcodec-copy-bsf-v-h264-mp4toannexb-output-h264"><a href="#5-提取音视频文件里面的H-264视频流-ffmpeg-i-output-mp4-an-vcodec-copy-bsf-v-h264-mp4toannexb-output-h264" class="headerlink" title="5. 提取音视频文件里面的H.264视频流: ffmpeg -i output.mp4 -an -vcodec copy -bsf:v h264_mp4toannexb output.h264"></a>5. 提取音视频文件里面的<strong>H.264</strong>视频流: <code>ffmpeg -i output.mp4 -an -vcodec copy -bsf:v h264_mp4toannexb output.h264</code></h5><h5 id="6-使用AAC和H-264文件生成mp4文件-ffmpeg-i-input-aac-i-input-h264-acodec-copy-bsf-a-aac-adtstoasc-vcodec-copy-f-mp4-output-mp4"><a href="#6-使用AAC和H-264文件生成mp4文件-ffmpeg-i-input-aac-i-input-h264-acodec-copy-bsf-a-aac-adtstoasc-vcodec-copy-f-mp4-output-mp4" class="headerlink" title="6. 使用AAC和H.264文件生成mp4文件: ffmpeg -i input.aac -i input.h264 -acodec copy -bsf:a aac_adtstoasc -vcodec copy -f mp4 output.mp4"></a>6. 使用<strong>AAC</strong>和<strong>H.264</strong>文件生成<strong>mp4</strong>文件: <code>ffmpeg -i input.aac -i input.h264 -acodec copy -bsf:a aac_adtstoasc -vcodec copy -f mp4 output.mp4</code></h5><h5 id="7-对音频文件的编码做转换-ffmpeg-i-input-wav-acodec-libfdk-aac-output-aac"><a href="#7-对音频文件的编码做转换-ffmpeg-i-input-wav-acodec-libfdk-aac-output-aac" class="headerlink" title="7. 对音频文件的编码做转换: ffmpeg -i input.wav -acodec libfdk_aac output.aac"></a>7. 对音频文件的编码做转换: <code>ffmpeg -i input.wav -acodec libfdk_aac output.aac</code></h5><h5 id="8-添加srt格式的字幕-ffmpeg-i-video-avi-vf-subtitles-subtitle-srt-out-avi"><a href="#8-添加srt格式的字幕-ffmpeg-i-video-avi-vf-subtitles-subtitle-srt-out-avi" class="headerlink" title="8. 添加srt格式的字幕: ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi"></a>8. 添加srt格式的字幕: <code>ffmpeg -i video.avi -vf subtitles=subtitle.srt out.avi</code></h5><h5 id="9-从现有视频文件中抽离字幕并且烧录进新的视频中：ffmpeg-i-video-mkv-vf-subtitles-video-mkv-out-avi"><a href="#9-从现有视频文件中抽离字幕并且烧录进新的视频中：ffmpeg-i-video-mkv-vf-subtitles-video-mkv-out-avi" class="headerlink" title="9. 从现有视频文件中抽离字幕并且烧录进新的视频中：ffmpeg -i video.mkv -vf subtitles=video.mkv out.avi"></a>9. 从现有视频文件中抽离字幕并且烧录进新的视频中：<code>ffmpeg -i video.mkv -vf subtitles=video.mkv out.avi</code></h5><h5 id="10-添加ass格式的字幕：ffmpeg-i-video-avi-vf-quot-ass-subtitle-ass-quot-out-avi-或者你可以先将srt转换成ass格式：ffmpeg-i-subtitle-srt-subtitle-ass"><a href="#10-添加ass格式的字幕：ffmpeg-i-video-avi-vf-quot-ass-subtitle-ass-quot-out-avi-或者你可以先将srt转换成ass格式：ffmpeg-i-subtitle-srt-subtitle-ass" class="headerlink" title="10. 添加ass格式的字幕：ffmpeg -i video.avi -vf &quot;ass=subtitle.ass&quot; out.avi 或者你可以先将srt转换成ass格式：ffmpeg -i subtitle.srt subtitle.ass"></a>10. 添加ass格式的字幕：<code>ffmpeg -i video.avi -vf &quot;ass=subtitle.ass&quot; out.avi</code> 或者你可以先将srt转换成ass格式：<code>ffmpeg -i subtitle.srt subtitle.ass</code></h5><h5 id="11-添加idx-sub格式的字幕：-ffmpeg-i-1-mp4-i-1-sub-i-1-idx-filter-complex-quot-0-v-2-s-overlay-0-H-h-quot-c-v-libx264-out-mp4"><a href="#11-添加idx-sub格式的字幕：-ffmpeg-i-1-mp4-i-1-sub-i-1-idx-filter-complex-quot-0-v-2-s-overlay-0-H-h-quot-c-v-libx264-out-mp4" class="headerlink" title="11. 添加idx/sub格式的字幕： ffmpeg -i 1.mp4 -i 1.sub -i 1.idx -filter_complex &quot;[0:v][2:s]overlay=0:H-h&quot; -c:v libx264 out.mp4"></a>11. 添加idx/sub格式的字幕： <code>ffmpeg -i 1.mp4 -i 1.sub -i 1.idx -filter_complex &quot;[0:v][2:s]overlay=0:H-h&quot; -c:v libx264 out.mp4</code></h5><blockquote><p>这个会将图片类型的sub/idx格式字幕烧录进视频文件中。</p></blockquote><h4 id="2-高级部分"><a href="#2-高级部分" class="headerlink" title="2. 高级部分"></a>2. 高级部分</h4><hr><blockquote><p>Advance: FFmpeg 流媒体<br>-re: 实时推送</p></blockquote><hr><h5 id="8-录制-amp-发布-RTMP-流"><a href="#8-录制-amp-发布-RTMP-流" class="headerlink" title="8. 录制 &amp; 发布 RTMP 流"></a>8. 录制 &amp; 发布 <strong>RTMP</strong> 流</h5><ol><li>发布RTMP流: <code>ffmpeg -i input.mp4 -c copy -f flv rtmp://localhost/live/class</code>  <blockquote><p>live 为发布点，class 为流名称<br>自定义发布点为 live1、流名称为 class1，并且实时推流<br><code>ffmpeg -re -i input.mp4 -c copy -f flv -rtmp_app live1 -rtmp_playpath class1 rtmp://localhost</code></p><ol><li>录制RTMP流: <code>ffmpeg -i rtmp://localhost/live/class -c copy -f flv output.flv</code> </li></ol></blockquote></li></ol><h5 id="9-录制-HTTP-流"><a href="#9-录制-HTTP-流" class="headerlink" title="9.  录制 HTTP 流"></a>9.  录制 <strong>HTTP</strong> 流</h5><ol><li><p>FLV直播流: <code>ffmpeg -i http://localhost/live.flv -c copy -f flv output.flv</code></p></li><li><p>TS直播流: <code>ffmpeg -i http://localhost/live.ts -c copy -f flv output.flv</code></p></li><li>HLS直播流: <code>ffmpeg -i http://localhost/live.m3u8 -c copy -f flv output.flv</code></li><li>设置 <em>http headers</em> &amp; <em>user_agent</em> &amp; <em>seekable</em> 等参数 : <code>ffmpeg -ss 300 -seekable 1 -user_agent &quot;CC&#39;s Player&quot; -headers &quot;referer: http://localhost/index.html&quot; -i http://localhost/live/class.flv -c copy -f flv -y ouput.flv</code>  </li></ol><h5 id="10-录制-amp-发布-TCP-UDP-流"><a href="#10-录制-amp-发布-TCP-UDP-流" class="headerlink" title="10. 录制 &amp; 发布 TCP/UDP 流"></a>10. 录制 &amp; 发布 <strong>TCP/UDP</strong> 流</h5><ol><li>发布TCP流: <code>ffmpeg -re -i input.mp4 -c copy -f flv tcp://127.0.0.1:123/live/stream</code><blockquote><p>设置缓冲区为 4096 bit：<code>ffmpeg -re -i input.mp4 -c copy -send_buffer_size 4096 -f flv tcp://127.0.0.1:123/live/stream</code></p></blockquote></li><li>录制TCP流: <code>ffmpeg -listen 1 -f flv -i tcp://127.0.0.1/live/stream -c copy -f flv output.flv</code><blockquote><p>设置监听端口超时 listen_timeout (5秒): <code>ffmpeg -listen_timeout 5000 -listen 1 -f flv -i tcp://127.0.0.1/live/stream -c copy -f flv output.flv</code><br>设置TCP流拉取超时参数 timeout （200秒）：<code>ffmpeg -timeout 20000000 -listen 1 -f flv -i tcp://127.0.0.1/live/stream -c copy -f flv output.flv</code></p></blockquote></li><li><p>发布UDP流：<code>ffmpeg -re -i input.mp4 -c copy -localport 23456 -f flv udp://127.0.0.1:123/live/stream</code></p><blockquote><p>使用FFmpeg的UDP传输数据时，默认会由系统分配本地端口，使用localport可以设置监听本地端口，抓包可以看到有一个 23456 -&gt; 123 的端口转发</p></blockquote><hr><blockquote><p>Advance: FFmpeg 桌面录制</p></blockquote><hr></li></ol><h5 id="11-Windows桌面-录制"><a href="#11-Windows桌面-录制" class="headerlink" title="11. Windows桌面 录制"></a>11. Windows桌面 录制</h5><table><thead><tr><th style="text-align:right">参数</th><th style="text-align:right">作用</th></tr></thead><tbody><tr><td style="text-align:right">draw_mouse</td><td style="text-align:right">是否采集鼠标指针</td></tr><tr><td style="text-align:right">show_region</td><td style="text-align:right">是否绘制采集边界</td></tr><tr><td style="text-align:right">framerate</td><td style="text-align:right">设置视频帧率，默认25帧，两个标准值为pal、ntsc</td></tr><tr><td style="text-align:right">video_size</td><td style="text-align:right">设置视频分辨率</td></tr><tr><td style="text-align:right">offset_x</td><td style="text-align:right">采集区域偏移x个像素</td></tr><tr><td style="text-align:right">offset_y</td><td style="text-align:right">采集区域偏移x个像素</td></tr></tbody></table><ul><li><p>整个桌面(设定帧率为60)：<code>./ffmpeg.exe -f gdigrab -framerate 60 -i desktop output.mp4</code></p></li><li><p>某个窗口（假设窗口名为ffmpeg）：<code>./ffmpeg.exe -f gdigrab -framerate 60 -i title=ffmpeg output.mp4</code></p></li><li><p>录制带偏移量的视频：<code>./ffmpeg.exe -f gdigrab -framerate 60 -offset_x 50 -offset_y 50 -video_size 400x400 -i title=ffmpeg output.mp4</code>  </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1. 安装&quot;&gt;&lt;/a&gt;1. 安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在FFmpeg的下载页面下载需要的版本，目前有Linux、Windows、MacOS版本 &amp;amp; Sou
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
      <category term="FFmpeg" scheme="https://iitii.github.io/categories/Linux/FFmpeg/"/>
    
    
      <category term="FFmpeg" scheme="https://iitii.github.io/tags/FFmpeg/"/>
    
      <category term="影视" scheme="https://iitii.github.io/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>SSH Config</title>
    <link href="https://iitii.github.io/2019/01/30/SSH_config/"/>
    <id>https://iitii.github.io/2019/01/30/SSH_config/</id>
    <published>2019-01-29T17:15:53.000Z</published>
    <updated>2019-03-05T03:44:04.852Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在对任何配置文件进行修改之前，最好都做好备份</p></blockquote><h3 id="1-安装openssh-server：sudo-apt-get-install-openssh-server"><a href="#1-安装openssh-server：sudo-apt-get-install-openssh-server" class="headerlink" title="1. 安装openssh-server：sudo apt-get install openssh-server"></a>1. 安装openssh-server：<code>sudo apt-get install openssh-server</code></h3><h3 id="2-是否启用密码认证："><a href="#2-是否启用密码认证：" class="headerlink" title="2. 是否启用密码认证："></a>2. 是否启用密码认证：</h3>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#YES</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="comment">#NO</span></span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure></div><h3 id="3-是否允许转发"><a href="#3-是否允许转发" class="headerlink" title="3. 是否允许转发"></a>3. 是否允许转发</h3>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#YES</span></span><br><span class="line">AllowTcpForwarding yes</span><br><span class="line">X11Forwarding yes</span><br><span class="line"><span class="comment">#NO</span></span><br><span class="line">AllowTcpForwarding no</span><br><span class="line">X11Forwarding no</span><br></pre></td></tr></table></figure></div><h3 id="4-禁止或允许通过SSH进行连接的用户"><a href="#4-禁止或允许通过SSH进行连接的用户" class="headerlink" title="4. 禁止或允许通过SSH进行连接的用户"></a>4. 禁止或允许通过SSH进行连接的用户</h3>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许用户Fred 和 Wilma进行连接</span></span><br><span class="line">AllowUsers Fred Wilma</span><br><span class="line"><span class="comment">#禁止用户Fred 和 Wilma进行连接</span></span><br><span class="line">DenyUsers Fred Wilma</span><br></pre></td></tr></table></figure></div><h3 id="5-限制连接数量，可以简单的在UFW里面配置：sudo-ufw-limit-ssh-or"><a href="#5-限制连接数量，可以简单的在UFW里面配置：sudo-ufw-limit-ssh-or" class="headerlink" title="5. 限制连接数量，可以简单的在UFW里面配置：sudo ufw limit ssh or"></a>5. 限制连接数量，可以简单的在UFW里面配置：<code>sudo ufw limit ssh</code> <strong>or</strong></h3>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改最大连接数量</span></span><br><span class="line">MaxStartups 2:30:10</span><br><span class="line"><span class="comment">#修改因用户不活跃而断开的等待时间</span></span><br><span class="line">LoginGraceTime 30</span><br></pre></td></tr></table></figure></div><h3 id="6-记录更多关于SSH登陆的消息"><a href="#6-记录更多关于SSH登陆的消息" class="headerlink" title="6. 记录更多关于SSH登陆的消息"></a>6. 记录更多关于SSH登陆的消息</h3>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以通过修改登陆日志的级别来实现</span></span><br><span class="line"><span class="comment">#详细（日志文件在 /var/log/auth.log）</span></span><br><span class="line">LogLevel VERBOSE</span><br><span class="line"><span class="comment">#粗略</span></span><br><span class="line">LogLevel INFO</span><br></pre></td></tr></table></figure></div><h3 id="7-是否在登陆时打印警示信息"><a href="#7-是否在登陆时打印警示信息" class="headerlink" title="7. 是否在登陆时打印警示信息"></a>7. 是否在登陆时打印警示信息</h3><ol><li>大部分的发行版（如：CentOS）登陆和欢迎信息控制在：<code>/etc/motd</code></li><li>Ubuntu的登陆和欢迎信息控制在：<code>/etc/issue</code> 和 <code>/etc/update-motd.d</code>。  </li><li><code>/etc/issue</code> 与 <code>/etc/update-motd.d</code> 区别在于：当一个网络用户或通过串口登录系统 上时, <code>/etc/issue</code> 的文件内容显示在<strong>login</strong>提示符之前,而 <code>/etc/update-motd.d</code> 里面的内容显示在用户成功登录系统之后。  </li><li><code>/etc/update-motd.d</code>里面存放着一些可执行脚本，您可以直接执行看看脚本的效果，也可以通过 <code>chmod -x 脚本名称</code>来达到禁用脚本的效果  </li><li>执行 <code>/usr/bin/landscape-sysinfo</code>可以查看系统资源使用信息，可以将这一条加入自己谢的脚本里面然后添加到 <code>/etc/update-motd.d</code>，然后再登陆的时候就可以看到系统资源的使用信息  </li><li><strong>修改后用：sudo run-parts /etc/update-motd.d 去执行就会立即见到效果，而不用反复注销登录。</strong></li><li>我们也可以在/etc/issue.net（telnet登陆时显示的信息） or /etc/issue（ssh登陆时输出的信息） 里面修改警告信息<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#issue 内各代码意义：</span></span><br><span class="line">\d 本地端时间日期；</span><br><span class="line">\l 显示第几个终端机接口；</span><br><span class="line">\m 显示硬件等级 (i386/i486/i586/i686…)；</span><br><span class="line">\n 显示主机网络名称；</span><br><span class="line">\o 显示 domain name；</span><br><span class="line">\r 操作系统版本 (相当于 uname -r)</span><br><span class="line">\t 显示本地端时间；</span><br><span class="line">\s 操作系统名称；</span><br><span class="line">\v 操作系统版本。</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="8-修改完ssh-config，需要手动重启一下ssh服务来加载配置文件使之生效：sudo-systemctl-restart-ssh"><a href="#8-修改完ssh-config，需要手动重启一下ssh服务来加载配置文件使之生效：sudo-systemctl-restart-ssh" class="headerlink" title="8. 修改完ssh_config，需要手动重启一下ssh服务来加载配置文件使之生效：sudo systemctl restart ssh"></a>8. 修改完ssh_config，需要手动重启一下ssh服务来加载配置文件使之生效：<code>sudo systemctl restart ssh</code></h3><hr><h3 id="9-参考链接："><a href="#9-参考链接：" class="headerlink" title="9. 参考链接："></a>9. 参考链接：</h3><ul><li><a href="https://help.ubuntu.com/community/SSH/OpenSSH/Configuring#Forwarding" target="_blank" rel="noopener">https://help.ubuntu.com/community/SSH/OpenSSH/Configuring#Forwarding</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在对任何配置文件进行修改之前，最好都做好备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-安装openssh-server：sudo-apt-get-install-openssh-server&quot;&gt;&lt;a href=&quot;#1-安装opens
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
    
      <category term="ssh" scheme="https://iitii.github.io/tags/ssh/"/>
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>修复无法连接VPN和学校校园有线网连接始终651错误</title>
    <link href="https://iitii.github.io/2019/01/24/%E4%BF%AE%E5%A4%8D%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5VPN%E5%92%8C%E5%AD%A6%E6%A0%A1%E6%A0%A1%E5%9B%AD%E6%9C%89%E7%BA%BF%E7%BD%91%E8%BF%9E%E6%8E%A5%E5%A7%8B%E7%BB%88651%E9%94%99%E8%AF%AF/"/>
    <id>https://iitii.github.io/2019/01/24/修复无法连接VPN和学校校园有线网连接始终651错误/</id>
    <published>2019-01-24T09:44:42.000Z</published>
    <updated>2019-02-13T09:44:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述：日前个人电脑始终无法连接学校电信有线网络-和-学校VPN，经过个人测试和排查后发现是TCP-IP协议的问题"><a href="#问题描述：日前个人电脑始终无法连接学校电信有线网络-和-学校VPN，经过个人测试和排查后发现是TCP-IP协议的问题" class="headerlink" title="问题描述：日前个人电脑始终无法连接学校电信有线网络 和 学校VPN，经过个人测试和排查后发现是TCP/IP协议的问题"></a>问题描述：日前个人电脑始终无法连接学校电信有线网络 和 学校VPN，经过个人测试和排查后发现是TCP/IP协议的问题</h3><h3 id="修复："><a href="#修复：" class="headerlink" title="修复："></a>修复：</h3><ul><li><p>打开设备管理器，找到下面黄条代表的文件<br><img src="/images/error720.jpg" alt="Loading"></p></li><li><p>卸载设备</p></li><li><p>重启，ok。</p><blockquote><p>治标不治本<br>目前还是没有什么好办法，有的话会及时分享的，也欢迎网友联系我<br>Email：<a href="mailto:ccmejx@gmail.com" target="_blank" rel="noopener">ccmejx@gmail.com</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述：日前个人电脑始终无法连接学校电信有线网络-和-学校VPN，经过个人测试和排查后发现是TCP-IP协议的问题&quot;&gt;&lt;a href=&quot;#问题描述：日前个人电脑始终无法连接学校电信有线网络-和-学校VPN，经过个人测试和排查后发现是TCP-IP协议的问题&quot; cl
      
    
    </summary>
    
      <category term="Windows" scheme="https://iitii.github.io/categories/Windows/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="VPN" scheme="https://iitii.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人订阅</title>
    <link href="https://iitii.github.io/2019/01/22/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85/"/>
    <id>https://iitii.github.io/2019/01/22/搭建个人订阅/</id>
    <published>2019-01-22T15:42:01.000Z</published>
    <updated>2019-03-23T14:58:46.089Z</updated>
    
    <content type="html"><![CDATA[<ol><li>说明：ss、ssr、v2ray等分享的链接都是通过base64来进行加密和解密的。同样的，订阅也是如此</li><li>创建订阅消息内容<ul><li>假如我们有这么一条链接：ssr://dwrfe, 如果我们想对其进行base64内容加密的话，可以这样：<code>echo &quot;ssr://dwrfe&quot; | base64 -w 0</code>,输出的信息即为订阅信息</li><li>如果两条及以上：<code>echo -e &quot;ssr://dwrfe \nssr://adsfdgf&quot; |base -w 0</code></li><li>其中 <code>-w 0</code> 代表<strong>不换行</strong></li></ul></li><li><p>創建訂閲節點</p><ul><li>將輸出的配置文件信息使用<code>tee</code>進行重定向輸出到站點文件夾目錄下的<strong>一個無後綴名的文件</strong>，或者<code>vim</code>手動編輯</li><li>如果訪問失敗，配置文件權限，簡單點：<code>chmod 777 訂閲文件名</code><blockquote><p>ps: 也可以将加密后的内容导入到Github之类的平台上  </p></blockquote></li></ul></li></ol><ol start="4"><li>关于代理的使用与常见问题的汇总<ul><li>参见：<a href="https://moe.best/tutorial/shadowsocksr.html" target="_blank" rel="noopener">[ShadowsocksR] 大概是萌新也看得懂的SSR功能详细介绍&amp;使用教程</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;说明：ss、ssr、v2ray等分享的链接都是通过base64来进行加密和解密的。同样的，订阅也是如此&lt;/li&gt;
&lt;li&gt;创建订阅消息内容&lt;ul&gt;
&lt;li&gt;假如我们有这么一条链接：ssr://dwrfe, 如果我们想对其进行base64内容加密的话，可以这样：&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
      <category term="proxy" scheme="https://iitii.github.io/categories/Linux/proxy/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu18.04 上通过PPTP VPN 远程桌面连接Windows</title>
    <link href="https://iitii.github.io/2019/01/11/%E5%9C%A8Ubuntu18.04%20%E4%B8%8A%E9%80%9A%E8%BF%87PPTP%20VPN%20%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5Windows/"/>
    <id>https://iitii.github.io/2019/01/11/在Ubuntu18.04 上通过PPTP VPN 远程桌面连接Windows/</id>
    <published>2019-01-11T05:26:00.000Z</published>
    <updated>2019-02-15T06:02:20.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置VPN并连接"><a href="#配置VPN并连接" class="headerlink" title="配置VPN并连接"></a>配置VPN并连接</h3><h4 id="配置VPN"><a href="#配置VPN" class="headerlink" title="配置VPN"></a>配置VPN</h4><ul><li><p>Setting -&gt; Network -&gt; VPN -&gt; 点击“+” -&gt; Add VPN -&gt; PPTP -&gt; (添加必要的信息，其中Gateway为远程VPN地址)</p><ul><li><p>修改<strong>Advanced</strong>选项（下面的我自己的方案）</p><p><img src="/images/pptp1.jpg" alt="Loading"></p></li></ul></li><li><p>连接VPN</p></li></ul><h3 id="连接VPN时可能出现的问题"><a href="#连接VPN时可能出现的问题" class="headerlink" title="连接VPN时可能出现的问题"></a>连接VPN时可能出现的问题</h3><h4 id="问题描述：-在用户名等完全正确的情况下无法连接VPN，点击连接，没多久就断了"><a href="#问题描述：-在用户名等完全正确的情况下无法连接VPN，点击连接，没多久就断了" class="headerlink" title="问题描述： 在用户名等完全正确的情况下无法连接VPN，点击连接，没多久就断了"></a>问题描述： 在用户名等完全正确的情况下无法连接VPN，点击连接，没多久就断了</h4><h4 id="解决方案：-查看日志文件-amp-google"><a href="#解决方案：-查看日志文件-amp-google" class="headerlink" title="解决方案： 查看日志文件 &amp; google"></a>解决方案： 查看日志文件 &amp; google</h4><ol><li>网卡的日志文件是<code>/var/log/syslog</code>，可以使用 <code>tail -f /var/log/syslog</code>命令来查看</li></ol><ul><li>关键字段：<strong>LCP: timeout sending Config-Requests</strong>  </li></ul><ol><li>原因：  <ol><li>在引导期间未加载2个必需的netfilter内核模块</li><li>多半是有一方的GRE协议未开启，检查服务器防火墙设置。</li><li><a href="https://blog.csdn.net/zggzcgy/article/details/53366803" target="_blank" rel="noopener">还可能的原因</a></li></ol></li><li><p>解决方案：</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#原因1</span></span><br><span class="line">sudo modprobe nf_conntrack_proto_gre nf_conntrack_pptp</span><br><span class="line"><span class="comment">#原因2</span></span><br><span class="line">sudo iptables -A INPUT -p gre -j ACCEPT</span><br><span class="line">sudo iptables -A OUTPUT -p gre -j ACCEPT </span><br><span class="line">sudo /etc/init.d/iptables save //保存</span><br><span class="line"><span class="comment">#我是两个问题都有。。。。</span></span><br></pre></td></tr></table></figure></div></li><li><p>重新连接并测试（OK）</p></li></ol><hr><h3 id="使用FreeRDP进行远程桌面连接"><a href="#使用FreeRDP进行远程桌面连接" class="headerlink" title="使用FreeRDP进行远程桌面连接"></a>使用FreeRDP进行远程桌面连接</h3><hr><blockquote><p>Q &amp; A   </p></blockquote><blockquote><p>Q1: 为什么不使用<code>rdesktop</code>进行桌面连接？  </p><p>A1: rdesktop已经过时，不支持Windows全新的身份认证协议  </p></blockquote><blockquote><p>Q2： Windows全新的身份认证协议是什么？  </p><p>A2： 所有Windows客户端都有一个凭据缓存，用于对名为NTLM或Windows NT LAN Manager的网络中的服务进行身份验证。RDP支持SSO（单点登录）身份验证，使用户能够使用单个ID和密码登录，以访问已连接的系统。但是，Linux客户端不支持此类型的身份验证，并且它们要求在启动远程会话时通过Rdesktop命令行或通过登录窗口提供凭据。Linux具有Kerberos，这是一种基于初始登录请求访问服务的身份验证机制。Windows Active Directory提供Kerberos基础结构，可以配置Linux以便对AD进行身份验证。这意味着在登录Linux时，您将通过Kerberos TGT（票证授予票证）进行身份验证，该票证用于访问其他服务，例如RDP。运行Rdesktop时，CredSSP将检查您是否拥有Kerberos TGT来访问远程服务，并将其用于远程RDS服务器的SSO身份验证。如果没有Kerberos TGT，则Rdesktop将回退到较低的，不安全的网络连接级别，而不需要网络级别的身份验证。</p></blockquote><blockquote><p>Q3: 如果我一定要使用它呢？  </p><p>A3: <a href="http://blog.51cto.com/firelong/1976019" target="_blank" rel="noopener">参考这篇文章</a></p></blockquote><hr><h4 id="安装FreeRDP"><a href="#安装FreeRDP" class="headerlink" title="安装FreeRDP"></a>安装FreeRDP</h4><pre><code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两个必须都安装</span></span><br><span class="line">sudo apt install freerdp2-x11</span><br><span class="line">sudo apt install freerdp-x11</span><br></pre></td></tr></table></figure></div></code></pre><h4 id="使用FreeRDP"><a href="#使用FreeRDP" class="headerlink" title="使用FreeRDP"></a>使用FreeRDP</h4><ol><li><p>用法：<code>xfreerdp [file] [options] [/v:&lt;server&gt;[:port]]</code></p></li><li><p>示例： <code>xfreerdp -f -v RemoteIP:PORT -u UserName -p Password</code></p></li><li><p>常用选项</p><pre><code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f：表示全屏（切换全屏的快捷键为：Ctrl + Alt + Enter）</span><br><span class="line">-v：远程服务器IP地址加端口号，windows默认远程连接端口号为3389</span><br><span class="line">-u：用户名</span><br><span class="line">-p：密码</span><br></pre></td></tr></table></figure></div></code></pre></li><li><p>解释<br> <code>xfreerdp -f -v 192.168.1.5:3389 -u  Admin -p 12345</code>  </p><blockquote><p>可能会有是否信任证书之类的，直接选择<code>Y</code>或者<code>T</code><br><del>表示使用用户名为Admin，密码为12345 的身份登录到远程服务器</del></p></blockquote></li></ol><hr><h3 id="附：Windows-NTSTATUS-Values"><a href="#附：Windows-NTSTATUS-Values" class="headerlink" title="附：Windows NTSTATUS Values"></a>附：<a href="https://msdn.microsoft.com/en-us/library/cc704588.aspx" target="_blank" rel="noopener">Windows NTSTATUS Values</a></h3><blockquote><p>其中0xC000006D表示：尝试登录无效。这可能是由于用户名或身份验证信息不正确造成的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;配置VPN并连接&quot;&gt;&lt;a href=&quot;#配置VPN并连接&quot; class=&quot;headerlink&quot; title=&quot;配置VPN并连接&quot;&gt;&lt;/a&gt;配置VPN并连接&lt;/h3&gt;&lt;h4 id=&quot;配置VPN&quot;&gt;&lt;a href=&quot;#配置VPN&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
      <category term="Ubuntu18.04" scheme="https://iitii.github.io/categories/Linux/Ubuntu18-04/"/>
    
      <category term="VPN" scheme="https://iitii.github.io/categories/Linux/Ubuntu18-04/VPN/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="VPN" scheme="https://iitii.github.io/tags/VPN/"/>
    
      <category term="Linux" scheme="https://iitii.github.io/tags/Linux/"/>
    
      <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
      <category term="Ubuntu18.04" scheme="https://iitii.github.io/tags/Ubuntu18-04/"/>
    
  </entry>
  
  <entry>
    <title>为IIS10配置PHP开发环境</title>
    <link href="https://iitii.github.io/2019/01/10/%E4%B8%BAIIS%E9%85%8D%E7%BD%AEPHP7.1%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://iitii.github.io/2019/01/10/为IIS配置PHP7.1开发环境/</id>
    <published>2019-01-10T05:41:09.000Z</published>
    <updated>2019-02-15T06:01:58.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-准备工作："><a href="#1-准备工作：" class="headerlink" title="1. 准备工作："></a>1. 准备工作：</h3><h4 id="1-控制面板-gt-开启或关闭Windows功能-gt-IIS-gt-CGI"><a href="#1-控制面板-gt-开启或关闭Windows功能-gt-IIS-gt-CGI" class="headerlink" title="1. 控制面板 -&gt; 开启或关闭Windows功能 -&gt; IIS -&gt; CGI"></a>1. 控制面板 -&gt; 开启或关闭Windows功能 -&gt; IIS -&gt; CGI</h4><p> <img src="/images/php1.jpg" alt="Loading"></p><h4 id="2-下载相应版本的PHP：官网"><a href="#2-下载相应版本的PHP：官网" class="headerlink" title="2. 下载相应版本的PHP：官网"></a>2. 下载相应版本的PHP：<a href="https://windows.php.net/download/" target="_blank" rel="noopener">官网</a></h4><ol><li>None-Thread Safe：非线程安全，在执行 时不进行线程是否安全的检查</li><li>Thread Safe: 线程安全，在执行时进行线程是否安全的检查，更安全 </li><li>FastCGI： 执行方式是以单一线程来执行操作，所以不需要进行线程的安全性检查，除去线程安全检查的防护反而可以提高执行效率。</li><li>其实个人的话都随便，就算有性能损失，有能有多少呢？这都9102年了。</li></ol><h4 id="3-安裝-Visual-Studio-2015-的-Visual-C-可再发行套件（安装过MicroSoft-SQL可以无视这一步，安装过VS2017应该也可以无视，未测试）"><a href="#3-安裝-Visual-Studio-2015-的-Visual-C-可再发行套件（安装过MicroSoft-SQL可以无视这一步，安装过VS2017应该也可以无视，未测试）" class="headerlink" title="3. 安裝 Visual Studio 2015 的 Visual C++ 可再发行套件（安装过MicroSoft SQL可以无视这一步，安装过VS2017应该也可以无视，未测试）"></a>3. 安裝 Visual Studio 2015 的 Visual C++ 可再发行套件（安装过MicroSoft SQL可以无视这一步，安装过VS2017应该也可以无视，未测试）</h4><blockquote><p>其实MicroSoft SQL用的就算VS2015的东西，修修改改又不是不能用<br>VC11 版本对应 VS2012<br>VC14 版本对应 VS2015</p></blockquote><hr><h3 id="2-配置："><a href="#2-配置：" class="headerlink" title="2. 配置："></a>2. 配置：</h3><blockquote><p>下面以<code>php-7.1.26-Win32-VC14-x64.zip</code>解压到<code>C:\PHP\</code>文件夹例子</p></blockquote><h4 id="1-修改配置文件php-ini"><a href="#1-修改配置文件php-ini" class="headerlink" title="1. 修改配置文件php.ini"></a>1. 修改配置文件<code>php.ini</code></h4><blockquote><p>首先创建<code>C:\PHP\php.ini-production</code>的副本并重命名为<code>php.ini</code>  </p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Ctrl + F，然后去掉前面的";"注释</span><br><span class="line">#必须修改</span><br><span class="line">extension_dir ="C:\PHP\ext" </span><br><span class="line">#推荐修改</span><br><span class="line">fastcgi.impersonate = 1</span><br><span class="line">fastcgi.logging = 0</span><br><span class="line">cgi.fix_pathinfo=1</span><br><span class="line">cgi.force_redirect = 0</span><br><span class="line">date.timezone = "Asia/Taipei"</span><br><span class="line">doc_root = "C:\inetpub\wwwroot"</span><br></pre></td></tr></table></figure><h4 id="2-配置IIS"><a href="#2-配置IIS" class="headerlink" title="2. 配置IIS"></a>2. 配置IIS</h4><p> <img src="/images/php2.jpg" alt="Loading"><br> <img src="/images/php3.jpg" alt="Loading"><br> <strong>*这里有个坑，记得点一下</strong>.dll*<br> <img src="/images/php4.jpg" alt="Loading"></p><h3 id="3-测试："><a href="#3-测试：" class="headerlink" title="3. 测试："></a>3. 测试：</h3><p> 在<code>C:\inetpub\wwwroot</code>（或者自己的一个网站文件夹）下新建一个文件<code>hello.php</code>。输入内容：<br> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;title&gt;World&lt;/title&gt; </span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">  &lt;body&gt; </span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">"Hello world"</span> <span class="meta">?&gt;</span> </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div></p><p>保存后，打开浏览器，输入地址：<a href="http://localhost/hello.php" target="_blank" rel="noopener">http://localhost/hello.php</a> 。如果网页中显示Hello world则说明安装正确。</p><blockquote><p>我们也可以在网页中通过查看hello.php的源代码，如果源代码中没有php代码，也说明安装是正确的。</p></blockquote><hr><h3 id="4-可能遇到的问题-转自：http-www-mamicode-com-info-detail-2452509-html"><a href="#4-可能遇到的问题-转自：http-www-mamicode-com-info-detail-2452509-html" class="headerlink" title="4. 可能遇到的问题(转自：http://www.mamicode.com/info-detail-2452509.html)"></a>4. 可能遇到的问题(转自：<a href="http://www.mamicode.com/info-detail-2452509.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-2452509.html</a>)</h3><ol><li><p>服务器报505错误，原因是缺少<code>visual c++2011</code></p></li><li><p>页面显示No input file specified，原因：如果使用ide自带的web服务器，需要把<code>php.ini</code>的<code>doc_root = &quot;C:\inetpub\wwwroot&quot;</code>注释掉</p></li><li><p>设置php时区，<code>php.ini</code>中修改<code>date.timezone = &quot;Asia/Shanghai&quot;</code></p></li><li><p>IIS的<code>wwwroot</code>目录在C盘所以需要手动开启写入权限，参考：<a href="http://jingyan.baidu.com/article/215817f7fa1bd41eda14239b.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/215817f7fa1bd41eda14239b.html</a></p></li><li><p>开启php服务器系统日志，<code>php.ini</code>中设置<code>log_errors = On</code>，并设置<code>error_log = C:/php/error.log</code>。程序中的<code>error_log(&quot;test&quot;)</code>就会把<code>test</code>输出到日志文件中，同时也可以设置<code>display_errors = Off</code> <strong>关闭错误回显</strong>，以免因为这些错误所透露的路径、数据库连接、数据表等信息而遭到黑客攻击。转自：<a href="https://www.cnblogs.com/yaohunzhanyue/p/7440574.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaohunzhanyue/p/7440574.html</a></p></li></ol><hr><h3 id="使用IIS自带的安装平台进行安装和管理PHP"><a href="#使用IIS自带的安装平台进行安装和管理PHP" class="headerlink" title="使用IIS自带的安装平台进行安装和管理PHP"></a>使用IIS自带的安装平台进行安装和管理PHP</h3><ul><li><p>安装<strong>PHP</strong> ： 打开IIS -&gt; Web平台安装程序 -&gt; 搜索PHP -&gt; 安装对应版本的PHP</p><p><img src="/images/php6.jpg" alt="alt"></p><center><small>（点击绿色圈里面的会新建一个窗口，红色圈里面的会在本页面打开）</small></center></li><li><p>安装<strong>PHP Manager</strong>：</p><ol><li><p>打开IIS -&gt; Web平台安装程序 -&gt; 搜索PHP Manager -&gt; 安装PHP Manager</p></li><li><p>通过安装<code>.msi</code>包来安装PHP Manager: <a href="https://www.iis.net/downloads/community/2018/05/php-manager-150-for-iis-10" target="_blank" rel="noopener">下载地址</a></p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-准备工作：&quot;&gt;&lt;a href=&quot;#1-准备工作：&quot; class=&quot;headerlink&quot; title=&quot;1. 准备工作：&quot;&gt;&lt;/a&gt;1. 准备工作：&lt;/h3&gt;&lt;h4 id=&quot;1-控制面板-gt-开启或关闭Windows功能-gt-IIS-gt-CGI&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Windows" scheme="https://iitii.github.io/categories/Windows/"/>
    
      <category term="IIS10" scheme="https://iitii.github.io/categories/Windows/IIS10/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="Windows" scheme="https://iitii.github.io/tags/Windows/"/>
    
      <category term="IIS" scheme="https://iitii.github.io/tags/IIS/"/>
    
      <category term="PHP" scheme="https://iitii.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>开源文件分享软件</title>
    <link href="https://iitii.github.io/2019/01/06/%E5%BC%80%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB%E8%BD%AF%E4%BB%B6%E5%92%8C%E7%BD%91%E7%9B%98/"/>
    <id>https://iitii.github.io/2019/01/06/开源文件分享软件和网盘/</id>
    <published>2019-01-06T12:50:14.000Z</published>
    <updated>2019-02-13T10:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nextcloud-amp-Owncloud"><a href="#Nextcloud-amp-Owncloud" class="headerlink" title="Nextcloud &amp; Owncloud"></a><a href="https://nextcloud.com" target="_blank" rel="noopener">Nextcloud &amp; Owncloud</a></h3><h4 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a>安装方式：</h4><ol><li><p>snap安装方式：</p>   <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install snap</span><br><span class="line">sudo snap install nextcloud</span><br></pre></td></tr></table></figure></div><ol><li><a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="noopener">网络在线安装：</a><ol><li>Right-click <a href="https://download.nextcloud.com/server/installer/setup-nextcloud.php" target="_blank" rel="noopener">here</a> and save the file to your computer</li><li>Upload <code>setup-nextcloud.php</code> to your web space</li><li>Point your web browser to <code>setup-nextcloud.php</code> on your webspace</li><li>Follow the instructions and configure Nextcloud</li><li>Login to your newly created Nextcloud instance!</li></ol></li><li><p>全手动安装，<a href="https://download.nextcloud.com/server/releases/nextcloud-15.0.0.zip" target="_blank" rel="noopener">下载zip文件</a>  </p></li><li><p>docker安装</p></li></ol></li></ol><h4 id="界面介绍：官方示例，在线查看实时生成"><a href="#界面介绍：官方示例，在线查看实时生成" class="headerlink" title="界面介绍：官方示例，在线查看实时生成"></a>界面介绍：<a href="https://demo.nextcloud.com/" target="_blank" rel="noopener">官方示例，在线查看实时生成</a></h4><h4 id="功能介绍："><a href="#功能介绍：" class="headerlink" title="功能介绍："></a>功能介绍：</h4><ol><li>可以在线播放MP4视频，MP3文件<ol start="2"><li>可以挂载外部储存</li><li>在线office</li><li>有很多在线插件，即点即用</li><li>对中文支持挺好</li><li>多说无益，自己去官方示例中体验吧</li></ol></li></ol><h3 id="Pydio"><a href="#Pydio" class="headerlink" title="Pydio"></a><a href="https://pydio.com" target="_blank" rel="noopener">Pydio</a></h3><ol><li><p>安装方式：支持全手动和docker安装</p></li><li><p>界面介绍：<a href="https://pydio.typeform.com/to/AUvlCj" target="_blank" rel="noopener">官方示例，在线查看实时生成</a> </p></li><li><p>功能介绍：</p><ol><li>可以在线播放MP4视频，MP3文件</li><li>对中文支持不怎么好</li><li><strong>界面非常好看</strong>（最大的特点）</li></ol></li></ol><h3 id="kiftd"><a href="#kiftd" class="headerlink" title="kiftd"></a><a href="https://kohgylw.gitee.io/" target="_blank" rel="noopener">kiftd</a></h3><ol><li><p>安装方式：无需安装，解压文件夹后直接执行解压文件夹一级目录下的<code>*.jar</code>文件（需先安装<code>Java</code>）</p></li><li><p>界面介绍： <img src="https://github.com/KOHGYLW/kiftd-showPicture/blob/master/kiftd-mainpage.png?raw=true" alt="Loading" title="自由、民主"></p></li><li><p>功能介绍：</p><ol><li>全中文文档，上手快</li><li>使用非常方便、简单、即点即用</li><li>界面简洁，就是一个简单的文件分享平台</li></ol></li><li><p>配置文件介绍：具体查看下载文件夹里面的说明文档的第27页和30页</p></li></ol><h3 id="DictionaryList"><a href="#DictionaryList" class="headerlink" title="DictionaryList"></a>DictionaryList</h3><ol><li>功能介绍：简单、好看的文件分享网站</li></ol><h3 id="seafile"><a href="#seafile" class="headerlink" title="seafile"></a>seafile</h3><blockquote><p>界面不怎么好看</p></blockquote><h3 id="dzzoffice"><a href="#dzzoffice" class="headerlink" title="dzzoffice"></a>dzzoffice</h3><blockquote><p>不怎么样，一般般，主要面对与使用office的企业用户和学生用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Nextcloud-amp-Owncloud&quot;&gt;&lt;a href=&quot;#Nextcloud-amp-Owncloud&quot; class=&quot;headerlink&quot; title=&quot;Nextcloud &amp;amp; Owncloud&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://n
      
    
    </summary>
    
      <category term="Share" scheme="https://iitii.github.io/categories/Share/"/>
    
    
      <category term="Open Source" scheme="https://iitii.github.io/tags/Open-Source/"/>
    
      <category term="Share" scheme="https://iitii.github.io/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>VPS对比与推荐</title>
    <link href="https://iitii.github.io/2019/01/02/VPS%E6%8E%A8%E8%8D%90/"/>
    <id>https://iitii.github.io/2019/01/02/VPS推荐/</id>
    <published>2019-01-02T04:56:12.000Z</published>
    <updated>2019-02-13T09:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><del>写在开头：VPS这种东西一分钱一分货，加钱你会慢？</del><br>不再更新</p></blockquote><hr><blockquote><p>商家太多，只是简单推荐</p></blockquote><h3 id="1-国内VPS优劣"><a href="#1-国内VPS优劣" class="headerlink" title="1. 国内VPS优劣"></a>1. 国内VPS优劣</h3><blockquote><p>优点：延迟低</p><hr><p>缺点: </p><ol><li>需要实名认证还有各种备案，麻烦的一批  </li><li>带宽很低，大部分都是什么1Mbps，说实话 <del>那有屌用</del></li><li>国内云服务商都会在自己家的镜像里加入检测代理相关的代码或者程序（如果实在想用来做代理之类的话，最好先在网上找一个信得过的在线重装系统的脚本，如果不…</li><li><del>想搞花里呼哨？？</del></li></ol></blockquote><hr><h3 id="2-国外VPS的优劣"><a href="#2-国外VPS的优劣" class="headerlink" title="2. 国外VPS的优劣"></a>2. 国外VPS的优劣</h3><blockquote><p>优点:</p><ol><li>带宽够，流量足</li><li>身份审查基本没有，方便，即开即用</li><li>有的时候优惠比较大，还有AFF，不像国内的一样各种套路，再怎么给也是优惠卷，代金卷什么的（<del>有屌用？</del>）  </li><li>访问外网（注意：有的商家并不欢迎机场但不反对个人代理）</li></ol><hr><p>缺点:</p><ol><li>延迟有点高，具体看什么价位，地区，商家的，一分钱一分货；别想着可以省钱</li><li>商家太多，不好抉择</li><li>大部分好商家付款方式一般不支持PayPal（也许正是因为这个所以没有被玩坏，没有被友商d）</li></ol></blockquote><h3 id="3-推荐的VPS商家"><a href="#3-推荐的VPS商家" class="headerlink" title="3. 推荐的VPS商家"></a>3. 推荐的VPS商家</h3><blockquote><p><del>排名不分先后</del></p></blockquote><table><thead><tr><th style="text-align:right">商家</th><th style="text-align:right">优惠力度</th><th style="text-align:right">获取条件</th></tr></thead><tbody><tr><td style="text-align:right"><a href="https://m.do.co/c/01284678aff5" target="_blank" rel="noopener">DigitalOcean</a></td><td style="text-align:right">$50</td><td style="text-align:right">GitHub学生认证</td></tr><tr><td style="text-align:right"><a href="https://www.vultr.com/?ref=7299471" target="_blank" rel="noopener">Vultr</a></td><td style="text-align:right">$20</td><td style="text-align:right">新用户 or 冲就送</td></tr><tr><td style="text-align:right"><a href="https://aws.amazon.com/cn/" target="_blank" rel="noopener">AWS</a></td><td style="text-align:right">$100</td><td style="text-align:right">Github学生认证 &amp;&amp; 需要外币卡）</td></tr><tr><td style="text-align:right"><a href="https://sa.net" target="_blank" rel="noopener">RivenCloud</a></td><td style="text-align:right">线路优良CN2</td><td style="text-align:right">支持支付宝等付款方式</td></tr><tr><td style="text-align:right"><a href="https://www.photonvps.com/billing/aff.php?aff=4414" target="_blank" rel="noopener">PhotonVPS</a></td><td style="text-align:right">台湾服务器（非直连）</td><td style="text-align:right">支付宝，PayPal，外币银行卡都行</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;写在开头：VPS这种东西一分钱一分货，加钱你会慢？&lt;/del&gt;&lt;br&gt;不再更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;商家太多，只是简单推荐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-
      
    
    </summary>
    
      <category term="VPS" scheme="https://iitii.github.io/categories/VPS/"/>
    
    
      <category term="VPS" scheme="https://iitii.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>修改Grub启动主题以及默认启动项</title>
    <link href="https://iitii.github.io/2018/12/27/%E4%BF%AE%E6%94%B9Grub%E5%90%AF%E5%8A%A8%E4%B8%BB%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    <id>https://iitii.github.io/2018/12/27/修改Grub启动主题以及默认启动项/</id>
    <published>2018-12-27T04:23:04.000Z</published>
    <updated>2019-02-13T09:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>在此之前还可以参考 <em><a href="https://iitii.github.io/2018/11/27/Ubuntu18.04%E9%85%8D%E7%BD%AEflat-remiax%E4%B8%BB%E9%A2%98/">Ubuntu18.04配置flat-remiax主题</a></em> 进行 <em>Ubuntu</em>主题的更改</p></blockquote></blockquote><h3 id="1-修改Grub主题"><a href="#1-修改Grub主题" class="headerlink" title="1. 修改Grub主题"></a>1. 修改Grub主题</h3><ol><li>打开 <a href="https://www.gnome-look.org/browse/cat/109/" target="_blank" rel="noopener">Grub theme</a> 选择你需要的主题并下载，推荐主题: <a href="https://www.gnome-look.org/p/1176413/" target="_blank" rel="noopener">Poly light</a>  主题项目: <a href="https://github.com/shvchk/poly-light" target="_blank" rel="noopener">Github</a>  <ul><li>预览：<img src="https://cn.opendesktop.org/img/d/6/4/7/467857c37ada80e2c57f37fac45ea93efe03.gif" alt="Loading..." title="自由、民主"></li></ul></li></ol><ol start="2"><li><p>下拉网页，在 <em>Product</em> 那里一般会有 <em>Description</em> 里面有作者的说明，具体包括<strong>安装</strong> 与 <strong>嘤</strong> 用。（一般的话就是直接解压，打开解压文件夹，运行 <code>./install.sh</code>,具体可能有所不同，自行选择）</p></li><li><p>名称及路径</p></li></ol><table><thead><tr><th style="text-align:right">名称</th><th style="text-align:right">路径</th></tr></thead><tbody><tr><td style="text-align:right">主题文件夹</td><td style="text-align:right"><code>/boot/grub/theme/*</code></td></tr><tr><td style="text-align:right">主题的配置文件</td><td style="text-align:right"><code>/boot/grub/theme/*/theme.txt</code></td></tr><tr><td style="text-align:right">主题的背景图片</td><td style="text-align:right"><code>/boot/grub/theme/*/background.png</code></td></tr><tr><td style="text-align:right"><em>Grub</em> 文件</td><td style="text-align:right"><code>/etc/default/grub/</code></td></tr></tbody></table><hr><blockquote><ol><li>主题的背景图片支持 <code>*.png</code> <code>*.jpg</code> <code>*.jpeg</code> 等格式  </li><li>更换图片时请务必注意图片的分辨率，必须小于屏幕的分辨率,否则会崩掉，使用默认主题。推荐 <a href="www.iloveimg.com">iLoveImg</a> 在线修图</li><li>修改完以上路径下的任意一个文件后， 最好使用 <code>sudo update-grub</code>命令更新一下Grub</li></ol></blockquote><hr><h3 id="2-修改Grub默认启动项"><a href="#2-修改Grub默认启动项" class="headerlink" title="2. 修改Grub默认启动项"></a>2. 修改<em>Grub</em>默认启动项</h3><hr><ol><li><p>执行 <code>sudo vim /etc/default/grub</code> 找到以下代码块:</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEFAULT=0</span><br><span class="line"><span class="comment">#GRUB_HIDDEN_TIMEOUT=0</span></span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET=<span class="literal">true</span></span><br><span class="line">GRUB_TIMEOUT=2</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || <span class="built_in">echo</span> Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">""</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br></pre></td></tr></table></figure></div></li><li><p><em><code>GRUB_DEFAULT=0</code></em> 代表默认启动项为第一项。就我个人电脑而言启动顺序如下</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu</span><br><span class="line">Advanced Operation <span class="keyword">for</span> Ubuntu</span><br><span class="line">Windows boot Manage</span><br><span class="line">System setup</span><br></pre></td></tr></table></figure></div><ul><li>其中从上而下顺序为0，1，2，3。所以应修改 <code>GRUB_DEFAULT=2</code>, 以此类推。</li><li>如果想修改Grub，启动默认等待时间的话可以修改 <code>GRUB_TIMEOUT=2</code> 的值，现在默认等待时间为2秒。</li></ul></li><li><code>sudo update-grub &amp;&amp; reboot</code></li></ol><hr><h3 id="3-数据有风险？-想皮需谨慎。"><a href="#3-数据有风险？-想皮需谨慎。" class="headerlink" title="3. 数据有风险？ 想皮需谨慎。"></a>3. 数据有风险？ 想皮需谨慎。</h3><!--![alt](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/%E7%9A%AE-order.gif/150px-%E7%9A%AE-order.gif)![alt](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/%E7%9A%AE-order.gif/150px-%E7%9A%AE-order.gif)![alt](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/%E7%9A%AE-order.gif/150px-%E7%9A%AE-order.gif)![alt](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/%E7%9A%AE-order.gif/150px-%E7%9A%AE-order.gif)<center><small>（本文所有图片来源网络，侵删）</small></center>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在此之前还可以参考 &lt;em&gt;&lt;a href=&quot;https://iitii.github.io/2018/11/27/Ubuntu18.04%E9%85%8D%E7%BD%AEflat-remiax%E4%B8%BB%E9%
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
      <category term="Ubuntu" scheme="https://iitii.github.io/categories/Linux/Ubuntu/"/>
    
    
      <category term="config" scheme="https://iitii.github.io/tags/config/"/>
    
      <category term="grub" scheme="https://iitii.github.io/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>命令行代理方式</title>
    <link href="https://iitii.github.io/2018/12/19/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BB%A3%E7%90%86/"/>
    <id>https://iitii.github.io/2018/12/19/命令行代理/</id>
    <published>2018-12-19T09:29:13.000Z</published>
    <updated>2019-02-13T09:13:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Windows命令行代理"><a href="#Windows命令行代理" class="headerlink" title="Windows命令行代理"></a>Windows命令行代理</h3><blockquote><p>因为在Win10上测试时 <code>powershell</code> 和 <code>cmd</code> 进行代理使用的命令是相同的，就不再赘述</p></blockquote><h4 id="标准："><a href="#标准：" class="headerlink" title="标准："></a>标准：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://user:password@IP:port </span><br><span class="line">set https_proxy=https://user:password@IP:port</span><br></pre></td></tr></table></figure></div><h4 id="范例："><a href="#范例：" class="headerlink" title="范例："></a>范例：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://localhost:<span class="number">1080</span></span><br><span class="line">set https_proxy=https://localhost:<span class="number">1080</span></span><br></pre></td></tr></table></figure></div><hr><h3 id="Linux-amp-Git-命令行代理"><a href="#Linux-amp-Git-命令行代理" class="headerlink" title="Linux &amp; Git 命令行代理"></a>Linux &amp; Git 命令行代理</h3><h4 id="标准：-1"><a href="#标准：-1" class="headerlink" title="标准："></a>标准：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy = user:password@IP:port</span><br><span class="line"><span class="built_in">export</span> https_proxy = user:password@IP:port</span><br></pre></td></tr></table></figure></div><h4 id="范例：-1"><a href="#范例：-1" class="headerlink" title="范例："></a>范例：</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy = localhost:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy = localhost:1080</span><br></pre></td></tr></table></figure></div><hr><h3 id="验证是否配置成功-："><a href="#验证是否配置成功-：" class="headerlink" title="验证是否配置成功 ："></a>验证是否配置成功 ：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl google.com</span><br></pre></td></tr></table></figure></div><blockquote><p>如果返回的消息中含有200，301状态码，皆表示已连通</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Windows命令行代理&quot;&gt;&lt;a href=&quot;#Windows命令行代理&quot; class=&quot;headerlink&quot; title=&quot;Windows命令行代理&quot;&gt;&lt;/a&gt;Windows命令行代理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;因为在Win10上测试时 &lt;cod
      
    
    </summary>
    
      <category term="Linux" scheme="https://iitii.github.io/categories/Linux/"/>
    
      <category term="Windows" scheme="https://iitii.github.io/categories/Linux/Windows/"/>
    
      <category term="proxy" scheme="https://iitii.github.io/categories/Linux/Windows/proxy/"/>
    
    
      <category term="Windows" scheme="https://iitii.github.io/tags/Windows/"/>
    
      <category term="Linux" scheme="https://iitii.github.io/tags/Linux/"/>
    
      <category term="proxy" scheme="https://iitii.github.io/tags/proxy/"/>
    
  </entry>
  
</feed>
